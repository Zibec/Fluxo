<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="RunCucumberTest" time="4.896" tests="112" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="23"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\lfta\OneDrive\Área de Trabalho\Fluxo\backend\mainDomain\target\test-classes;C:\Users\lfta\OneDrive\Área de Trabalho\Fluxo\backend\mainDomain\target\classes;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-java\7.23.0\cucumber-java-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-core\7.23.0\cucumber-core-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-gherkin\7.23.0\cucumber-gherkin-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-gherkin-messages\7.23.0\cucumber-gherkin-messages-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\gherkin\32.1.1\gherkin-32.1.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\messages\27.2.0\messages-27.2.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\testng-xml-formatter\0.3.1\testng-xml-formatter-0.3.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\query\13.6.0\query-13.6.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\tag-expressions\6.1.2\tag-expressions-6.1.2.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-expressions\18.0.1\cucumber-expressions-18.0.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\datatable\7.23.0\datatable-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-plugin\7.23.0\cucumber-plugin-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\docstring\7.23.0\docstring-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\html-formatter\21.10.1\html-formatter-21.10.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\junit-xml-formatter\0.7.1\junit-xml-formatter-0.7.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\ci-environment\10.0.1\ci-environment-10.0.1.jar;C:\Users\lfta\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\lfta\.m2\repository\commons-validator\commons-validator\1.9.0\commons-validator-1.9.0.jar;C:\Users\lfta\.m2\repository\commons-beanutils\commons-beanutils\1.9.4\commons-beanutils-1.9.4.jar;C:\Users\lfta\.m2\repository\commons-digester\commons-digester\2.1\commons-digester-2.1.jar;C:\Users\lfta\.m2\repository\commons-logging\commons-logging\1.3.2\commons-logging-1.3.2.jar;C:\Users\lfta\.m2\repository\commons-collections\commons-collections\3.2.2\commons-collections-3.2.2.jar;C:\Users\lfta\.m2\repository\org\apache\commons\commons-lang3\3.12.0\commons-lang3-3.12.0.jar;C:\Users\lfta\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.9.1\junit-jupiter-engine-5.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-engine\1.9.1\junit-platform-engine-1.9.1.jar;C:\Users\lfta\.m2\repository\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-commons\1.9.1\junit-platform-commons-1.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.9.1\junit-jupiter-api-5.9.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-junit-platform-engine\7.14.1\cucumber-junit-platform-engine-7.14.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-suite\1.9.1\junit-platform-suite-1.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-suite-api\1.9.1\junit-platform-suite-api-1.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-suite-engine\1.9.1\junit-platform-suite-engine-1.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-suite-commons\1.9.1\junit-platform-suite-commons-1.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-launcher\1.9.1\junit-platform-launcher-1.9.1.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="America/Fortaleza"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="23"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="BR"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-23\bin"/>
    <property name="sun.java.command" value="C:\Users\lfta\AppData\Local\Temp\surefire6453599912852143396\surefirebooter-20251022093953125_3.jar C:\Users\lfta\AppData\Local\Temp\surefire6453599912852143396 2025-10-22T09-39-52_883-jvmRun1 surefire-20251022093953125_1tmp surefire_0-20251022093953125_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\lfta\OneDrive\Área de Trabalho\Fluxo\backend\mainDomain\target\test-classes;C:\Users\lfta\OneDrive\Área de Trabalho\Fluxo\backend\mainDomain\target\classes;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-java\7.23.0\cucumber-java-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-core\7.23.0\cucumber-core-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-gherkin\7.23.0\cucumber-gherkin-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-gherkin-messages\7.23.0\cucumber-gherkin-messages-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\gherkin\32.1.1\gherkin-32.1.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\messages\27.2.0\messages-27.2.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\testng-xml-formatter\0.3.1\testng-xml-formatter-0.3.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\query\13.6.0\query-13.6.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\tag-expressions\6.1.2\tag-expressions-6.1.2.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-expressions\18.0.1\cucumber-expressions-18.0.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\datatable\7.23.0\datatable-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-plugin\7.23.0\cucumber-plugin-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\docstring\7.23.0\docstring-7.23.0.jar;C:\Users\lfta\.m2\repository\io\cucumber\html-formatter\21.10.1\html-formatter-21.10.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\junit-xml-formatter\0.7.1\junit-xml-formatter-0.7.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\ci-environment\10.0.1\ci-environment-10.0.1.jar;C:\Users\lfta\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\lfta\.m2\repository\commons-validator\commons-validator\1.9.0\commons-validator-1.9.0.jar;C:\Users\lfta\.m2\repository\commons-beanutils\commons-beanutils\1.9.4\commons-beanutils-1.9.4.jar;C:\Users\lfta\.m2\repository\commons-digester\commons-digester\2.1\commons-digester-2.1.jar;C:\Users\lfta\.m2\repository\commons-logging\commons-logging\1.3.2\commons-logging-1.3.2.jar;C:\Users\lfta\.m2\repository\commons-collections\commons-collections\3.2.2\commons-collections-3.2.2.jar;C:\Users\lfta\.m2\repository\org\apache\commons\commons-lang3\3.12.0\commons-lang3-3.12.0.jar;C:\Users\lfta\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.9.1\junit-jupiter-engine-5.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-engine\1.9.1\junit-platform-engine-1.9.1.jar;C:\Users\lfta\.m2\repository\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-commons\1.9.1\junit-platform-commons-1.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.9.1\junit-jupiter-api-5.9.1.jar;C:\Users\lfta\.m2\repository\io\cucumber\cucumber-junit-platform-engine\7.14.1\cucumber-junit-platform-engine-7.14.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-suite\1.9.1\junit-platform-suite-1.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-suite-api\1.9.1\junit-platform-suite-api-1.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-suite-engine\1.9.1\junit-platform-suite-engine-1.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-suite-commons\1.9.1\junit-platform-suite-commons-1.9.1.jar;C:\Users\lfta\.m2\repository\org\junit\platform\junit-platform-launcher\1.9.1\junit-platform-launcher-1.9.1.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\lfta"/>
    <property name="user.language" value="pt"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2024-09-17"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-23"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\lfta\OneDrive\Área de Trabalho\Fluxo\backend\mainDomain"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="surefire.real.class.path" value="C:\Users\lfta\AppData\Local\Temp\surefire6453599912852143396\surefirebooter-20251022093953125_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="23+37-2369"/>
    <property name="user.name" value="lfta"/>
    <property name="stdout.encoding" value="Cp1252"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\lfta\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\lfta\AppData\Local\Temp\"/>
    <property name="java.version" value="23"/>
    <property name="user.dir" value="C:\Users\lfta\OneDrive\Área de Trabalho\Fluxo\backend\mainDomain"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-23\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Common Files\Oracle\Java\javapath;C:\ProgramData\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\Intel\Shared Libraries\redist\intel64\compiler;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\nodejs\;C:\Program Files\dotnet\;C:\Program Files\WireGuard\;C:\Program Files (x86)\Graphviz\bin;C:\ProgramData\chocolatey\bin;C:\ProgramData\chocolatey\lib\maven\apache-maven-3.9.11\bin;C:\Users\lfta\AppData\Local\Programs\Python\Python312\Scripts\;C:\Users\lfta\AppData\Local\Programs\Python\Python312\;C:\Users\lfta\AppData\Local\Microsoft\WindowsApps;C:\Users\lfta\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\lfta\AppData\Local\Programs\Git\cmd;C:\MinGW\bin;C:\Users\lfta\AppData\Roaming\npm;C:\Program Files\nodejs\node_modules\npm\bin;;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="Cp1252"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="23+37-2369"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="67.0"/>
  </properties>
  <testcase name="Agendamento de transações bancárias" classname="Automação e Agendamento de transações" time="0.333">
    <system-out><![CDATA[
Scenario: Agendamento de transações bancárias                                                                           &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:7&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma transação para o usuário pagar que é debitada do seu cartao no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"16/09/2025"&amp#27;[0m                  &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenCartaoDebitoNoDia(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário precisa registrar essa transação para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"16/09/2025"&amp#27;[0m                                               &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenRegistrarParaDia(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo dia atual é &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/09/2025"&amp#27;[0m                                                                                        &amp#27;[90m# dominio.agendamento.AgendamentoTest.andHojeEh(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo usuário verá que o sistema salvou como &amp#27;[0m&amp#27;[32m&amp#27;[1m"agendada"&amp#27;[0m&amp#27;[32m para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"16/09/2025"&amp#27;[0m&amp#27;[32m uma transferência que será realizada&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenTransacaoSalvaComo(java.lang.String,java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Agendamento de transação com data no passado (rejeição)" classname="Automação e Agendamento de transações" time="0.01">
    <system-out><![CDATA[
Scenario: Agendamento de transação com data no passado (rejeição)    &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:13&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque a data atual é &amp#27;[0m&amp#27;[32m&amp#27;[1m"20/09/2025"&amp#27;[0m                              &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenDataAtual(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tenta agendar uma transação para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/09/2025"&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.usuarioTentaAgendarTransacaoParaODia(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema não deve salvar o agendamento&amp#27;[0m                       &amp#27;[90m# dominio.agendamento.AgendamentoTest.sistemaNaoDeveSalvarAgendamento_regex()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mdeve informar que a data é inválida por estar no passado&amp#27;[0m       &amp#27;[90m# dominio.agendamento.AgendamentoTest.deveInformarQueDataInvalidaPorEstarNoPassado_regex()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cancelamento de transações bancárias" classname="Automação e Agendamento de transações" time="0.012">
    <system-out><![CDATA[
Scenario: Cancelamento de transações bancárias                                                      &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:19&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma transação para o usuário efetuar no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"16/09/2025"&amp#27;[0m&amp#27;[32m no valor de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 600,00"&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenTransacaoParaEfetuarNoDia(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário quer cancelar essa transação que iria ser paga no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"16/09/2025"&amp#27;[0m                 &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenCancelarTransacaoDoDia(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema irá excluir esse pagamento&amp#27;[0m                                                         &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenPagamentoExcluido()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cancelamento de transação já executada (rejeição)" classname="Automação e Agendamento de transações" time="0.012">
    <system-out><![CDATA[
Scenario: Cancelamento de transação já executada (rejeição)                           &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:24&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma transação que já foi executada no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"16/09/2025"&amp#27;[0m             &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenTransacaoJaExecutada(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tenta cancelar essa transação executada&amp#27;[0m                              &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenCancelaTransacaoExecutada()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve informar que não é possível cancelar uma transação já executada&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenNaoCancelaExecutada()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Atualização de transações bancárias" classname="Automação e Agendamento de transações" time="0.061">
    <system-out><![CDATA[
Scenario: Atualização de transações bancárias                                                                 &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:29&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma transação para o usuário pagar no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"16/09/2025"&amp#27;[0m&amp#27;[32m no valor de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 600,00"&amp#27;[0m             &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenTransacaoParaPagarNoDia(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuario tem essa transação que será paga no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"16/09/2025"&amp#27;[0m&amp#27;[32m no valor de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 600,00"&amp#27;[0m                 &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenUsuarioTemTransacaoNoDiaValor(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mnecessita atualizar o dia e/ou o valor da transaferência para &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/09/2025"&amp#27;[0m&amp#27;[32m no novo valor de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 550,00"&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenAtualizaDiaOuValorPara(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema irá atualizar esse pagamento&amp#27;[0m                                                                 &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenPagamentoAtualizado()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Atualização de transação para data no passado (rejeição)" classname="Automação e Agendamento de transações" time="0.01">
    <system-out><![CDATA[
Scenario: Atualização de transação para data no passado (rejeição)                        &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:35&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma transação agendada para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"16/09/2025"&amp#27;[0m&amp#27;[32m no valor de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 600,00"&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenTransacaoAgendadaParaDia(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32ma data atual é &amp#27;[0m&amp#27;[32m&amp#27;[1m"20/09/2025"&amp#27;[0m                                                         &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenDataAtualGenerica(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tenta atualizar a data dessa transação para &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/09/2025"&amp#27;[0m                 &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenUsuarioTentaAtualizarData(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema não deve permitir a atualização&amp#27;[0m                                          &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenSistemaNaoPermiteAtualizacao()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mdeve informar que a nova data é inválida por estar no passado&amp#27;[0m                       &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenInformaDataInvalida()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Criação de assinatura mensal" classname="Automação e Agendamento de transações" time="0.034">
    <system-out><![CDATA[
Scenario: Criação de assinatura mensal                                                          &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:44&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque a data atual é &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/10/2025"&amp#27;[0m                                                         &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenDataAtual(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário cria uma assinatura mensal &amp#27;[0m&amp#27;[32m&amp#27;[1m"Netflix"&amp#27;[0m&amp#27;[32m para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"17"&amp#27;[0m&amp#27;[32m iniciando em &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/10/2025"&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenCriaAssinaturaMensal(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mdeve ser criada uma data de transação no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/10/2025"&amp#27;[0m                                &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenCriaTransacaoNaData(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32ma próxima data de transação deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/11/2025"&amp#27;[0m                                         &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenProximaDataDeveSer(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Próxima data avança até novembro após duas cobranças" classname="Automação e Agendamento de transações" time="0.036">
    <system-out><![CDATA[
Scenario: Próxima data avança até novembro após duas cobranças                                           &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:50&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste uma assinatura mensal &amp#27;[0m&amp#27;[32m&amp#27;[1m"Netflix"&amp#27;[0m&amp#27;[32m configurada para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"17"&amp#27;[0m&amp#27;[32m com próxima data &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/09/2025"&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenAssinaturaMensalConfigurada(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32ma próxima data de transação é &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/09/2025"&amp#27;[0m                                                         &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenProximaData(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo sistema executa a cobrança no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/09/2025"&amp#27;[0m                                                  &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenExecutaCobranca(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo sistema executa a cobrança no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/10/2025"&amp#27;[0m                                                   &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenExecutaCobranca(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma próxima data de transação deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/11/2025"&amp#27;[0m                                                 &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenProximaDataDeveSer(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Assinatura em mês curtos" classname="Automação e Agendamento de transações" time="0.016">
    <system-out><![CDATA[
Scenario: Assinatura em mês curtos                                              &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:57&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma data de vencimento de assinatura para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"29/02/2025"&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenVencimentoAssinaturaNoDia(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tem essa assinatura para pagar no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"29/02/2025"&amp#27;[0m             &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenTemAssinaturaParaDia(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema botará o pagamento agendado para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"28/02/2025"&amp#27;[0m            &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenAgendaPagamentoParaDia(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Atualiza próxima data em mês curto após execução" classname="Automação e Agendamento de transações" time="0.012">
    <system-out><![CDATA[
Scenario: Atualiza próxima data em mês curto após execução                                     &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:62&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste uma assinatura mensal configurada para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"31"&amp#27;[0m&amp#27;[32m com próxima data &amp#27;[0m&amp#27;[32m&amp#27;[1m"31/01/2025"&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.existeUmaAssinaturaMensalConfiguradaParaODiaComProximaData(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo sistema executa a cobrança no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"31/01/2025"&amp#27;[0m                                        &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenExecutaCobranca(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma próxima data de transação deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"28/02/2025"&amp#27;[0m&amp#27;[32m  # ou &amp#27;[0m&amp#27;[32m&amp#27;[1m29&amp#27;[0m&amp#27;[32m/&amp#27;[0m&amp#27;[32m&amp#27;[1m02&amp#27;[0m&amp#27;[32m em ano bissexto&amp#27;[0m           &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenProximaDataDeveSerOu(java.lang.String,java.lang.Integer,java.lang.Integer)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cancelamento de assinatura" classname="Automação e Agendamento de transações" time="0.012">
    <system-out><![CDATA[
Scenario: Cancelamento de assinatura                                                       &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:67&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma assinatura da &amp#27;[0m&amp#27;[32m&amp#27;[1m"Netflix"&amp#27;[0m&amp#27;[32m que vence todo mês no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"17"&amp#27;[0m&amp#27;[32m e esta ativa&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenAssinaturaAtivaVenceDia(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário quer cancelar essa assinatura&amp#27;[0m                                             &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenCancelaAssinatura()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo status deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"cancelada"&amp#27;[0m                                                       &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenStatusDeveSer(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mnão deve existir próxima data de execução&amp#27;[0m                                            &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenSemProximaData()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cancelamento de assinatura inexistente ou já cancelada" classname="Automação e Agendamento de transações" time="0.012">
    <system-out><![CDATA[
Scenario: Cancelamento de assinatura inexistente ou já cancelada                                  &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:73&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque não existe uma assinatura ativa chamada &amp#27;[0m&amp#27;[32m&amp#27;[1m"Netflix"&amp#27;[0m&amp#27;[32m (inexistente ou status &amp#27;[0m&amp#27;[32m&amp#27;[1m"cancelada"&amp#27;[0m&amp#27;[32m)&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.queNaoExisteUmaAssinaturaAtivaChamadaInexistenteOuStatus(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tenta cancelar essa assinatura&amp#27;[0m                                                   &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenCancelaAssinaturaInexistente()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve informar que não há assinatura ativa para cancelar&amp#27;[0m                          &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenNaoHaAssinaturaAtiva()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Evita duplicidade ao executar duas vezes" classname="Automação e Agendamento de transações" time="0.011">
    <system-out><![CDATA[
Scenario: Evita duplicidade ao executar duas vezes                           &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:78&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o próximo dia de pagamento é &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/11/2025"&amp#27;[0m                        &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenProximoDiaPagamento(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mjá existe a transação desse pagamento agendada para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/11/2025"&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenTransacaoJaAgendadaParaDia(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo agendamento tentar executar novamente em &amp#27;[0m&amp#27;[32m&amp#27;[1m17&amp#27;[0m&amp#27;[32m/&amp#27;[0m&amp#27;[32m&amp#27;[1m11&amp#27;[0m&amp#27;[32m/&amp#27;[0m&amp#27;[32m&amp#27;[1m2025&amp#27;[0m                 &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenExecutarNovamenteEm(java.lang.Integer,java.lang.Integer,java.lang.Integer)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mnenhuma nova transação deve ser criada&amp#27;[0m                                &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenNaoCriaNovaTransacao()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cria transação no novo ciclo (sem duplicidade)" classname="Automação e Agendamento de transações" time="0.032">
    <system-out><![CDATA[
Scenario: Cria transação no novo ciclo (sem duplicidade)                &amp#27;[90m# automacao_e_agendamento_de_transacoes.feature:84&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o próximo dia de pagamento é &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/12/2025"&amp#27;[0m                   &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenProximoDiaPagamento(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mnão existe transação agendada para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/12/2025"&amp#27;[0m             &amp#27;[90m# dominio.agendamento.AgendamentoTest.givenNaoExisteTransacao(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo agendamento executar em &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/12/2025"&amp#27;[0m                           &amp#27;[90m# dominio.agendamento.AgendamentoTest.whenAgendamentoExecutar(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mdeve ser criada exatamente uma transação para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m"17/12/2025"&amp#27;[0m &amp#27;[90m# dominio.agendamento.AgendamentoTest.thenCriaExatamenteUma(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Atualizar e-mail com senha atual correta (sucesso)" classname="Atualização de Perfil do Usuário" time="0.357">
    <system-out><![CDATA[
Scenario: Atualizar e-mail com senha atual correta (sucesso) &amp#27;[90m# configuracoes_usuario.feature:7&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                          &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo minha senha atual corretamente&amp#27;[0m                 &amp#27;[90m# dominio.usuario.UsuarioTest.informo_minha_senha_atual_corretamente()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32maltero meu e-mail para &amp#27;[0m&amp#27;[32m&amp#27;[1m"novoemail@dominio.com"&amp#27;[0m        &amp#27;[90m# dominio.usuario.UsuarioTest.altero_meu_e_mail_para(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve atualizar o e-mail com sucesso&amp#27;[0m         &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_atualizar_o_e_mail_com_sucesso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha ao atualizar e-mail com senha atual incorreta" classname="Atualização de Perfil do Usuário" time="0.222">
    <system-out><![CDATA[
Scenario: Falha ao atualizar e-mail com senha atual incorreta     &amp#27;[90m# configuracoes_usuario.feature:13&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                               &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo uma senha atual incorreta&amp#27;[0m                           &amp#27;[90m# dominio.usuario.UsuarioTest.informo_uma_senha_atual_incorreta()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mtento alterar meu e-mail para &amp#27;[0m&amp#27;[32m&amp#27;[1m"novoemail@dominio.com"&amp#27;[0m      &amp#27;[90m# dominio.usuario.UsuarioTest.tento_alterar_meu_e_mail_para(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve exibir uma mensagem de erro de autenticação&amp#27;[0m &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_exibir_uma_mensagem_de_erro_de_autenticacao()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Atualizar username para um nome único (sucesso)" classname="Atualização de Perfil do Usuário" time="0.222">
    <system-out><![CDATA[
Scenario: Atualizar username para um nome único (sucesso) &amp#27;[90m# configuracoes_usuario.feature:20&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                       &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo minha senha atual corretamente&amp#27;[0m              &amp#27;[90m# dominio.usuario.UsuarioTest.informo_minha_senha_atual_corretamente()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32maltero meu username para &amp#27;[0m&amp#27;[32m&amp#27;[1m"usuario_unico123"&amp#27;[0m        &amp#27;[90m# dominio.usuario.UsuarioTest.altero_meu_username_para(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve salvar o novo username&amp#27;[0m              &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_salvar_o_novo_username()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha ao atualizar username já existente" classname="Atualização de Perfil do Usuário" time="0.222">
    <system-out><![CDATA[
Scenario: Falha ao atualizar username já existente                  &amp#27;[90m# configuracoes_usuario.feature:26&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                                 &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo minha senha atual corretamente&amp#27;[0m                        &amp#27;[90m# dominio.usuario.UsuarioTest.informo_minha_senha_atual_corretamente()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32maltero meu username para &amp#27;[0m&amp#27;[32m&amp#27;[1m"usuario_existente"&amp#27;[0m                 &amp#27;[90m# dominio.usuario.UsuarioTest.altero_meu_username_para(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve exibir uma mensagem de erro de nome já em uso&amp#27;[0m &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_exibir_uma_mensagem_de_erro_de_nome_ja_em_uso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Atualizar e-mail com formato válido (sucesso)" classname="Atualização de Perfil do Usuário" time="0.223">
    <system-out><![CDATA[
Scenario: Atualizar e-mail com formato válido (sucesso) &amp#27;[90m# configuracoes_usuario.feature:33&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                     &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo minha senha atual corretamente&amp#27;[0m            &amp#27;[90m# dominio.usuario.UsuarioTest.informo_minha_senha_atual_corretamente()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32maltero meu e-mail para &amp#27;[0m&amp#27;[32m&amp#27;[1m"valido@dominio.com"&amp#27;[0m      &amp#27;[90m# dominio.usuario.UsuarioTest.altero_meu_e_mail_para(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve salvar o novo e-mail&amp#27;[0m              &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_salvar_o_novo_e_mail()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha ao atualizar e-mail com formato inválido" classname="Atualização de Perfil do Usuário" time="0.218">
    <system-out><![CDATA[
Scenario: Falha ao atualizar e-mail com formato inválido              &amp#27;[90m# configuracoes_usuario.feature:39&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                                   &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo minha senha atual corretamente&amp#27;[0m                          &amp#27;[90m# dominio.usuario.UsuarioTest.informo_minha_senha_atual_corretamente()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32maltero meu e-mail para &amp#27;[0m&amp#27;[32m&amp#27;[1m"email-invalido"&amp#27;[0m                        &amp#27;[90m# dominio.usuario.UsuarioTest.altero_meu_e_mail_para(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve exibir uma mensagem de erro de formato inválido&amp#27;[0m &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_exibir_uma_mensagem_de_erro_de_formato_invalido()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Atualizar e-mail para um endereço único (sucesso)" classname="Atualização de Perfil do Usuário" time="0.215">
    <system-out><![CDATA[
Scenario: Atualizar e-mail para um endereço único (sucesso) &amp#27;[90m# configuracoes_usuario.feature:46&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                         &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo minha senha atual corretamente&amp#27;[0m                &amp#27;[90m# dominio.usuario.UsuarioTest.informo_minha_senha_atual_corretamente()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32maltero meu e-mail para &amp#27;[0m&amp#27;[32m&amp#27;[1m"unico@dominio.com"&amp#27;[0m           &amp#27;[90m# dominio.usuario.UsuarioTest.altero_meu_e_mail_para(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve salvar o novo e-mail&amp#27;[0m                  &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_salvar_o_novo_e_mail()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha ao atualizar e-mail já existente" classname="Atualização de Perfil do Usuário" time="0.215">
    <system-out><![CDATA[
Scenario: Falha ao atualizar e-mail já existente                          &amp#27;[90m# configuracoes_usuario.feature:52&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                                       &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo minha senha atual corretamente&amp#27;[0m                              &amp#27;[90m# dominio.usuario.UsuarioTest.informo_minha_senha_atual_corretamente()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32maltero meu e-mail para &amp#27;[0m&amp#27;[32m&amp#27;[1m"email_existente@dominio.com"&amp#27;[0m               &amp#27;[90m# dominio.usuario.UsuarioTest.altero_meu_e_mail_para(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve exibir uma mensagem de erro de e-mail já cadastrado&amp#27;[0m &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_exibir_uma_mensagem_de_erro_de_e_mail_ja_cadastrado()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Alterar senha com senha atual correta (sucesso)" classname="Atualização de Perfil do Usuário" time="0.519">
    <system-out><![CDATA[
Scenario: Alterar senha com senha atual correta (sucesso) &amp#27;[90m# configuracoes_usuario.feature:59&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                       &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo a senha atual correta &amp#27;[0m&amp#27;[32m&amp#27;[1m"senha123"&amp#27;[0m            &amp#27;[90m# dominio.usuario.UsuarioTest.informo_a_senha_atual_correta(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32minformo a nova senha &amp#27;[0m&amp#27;[32m&amp#27;[1m"novaSenha456"&amp#27;[0m                &amp#27;[90m# dominio.usuario.UsuarioTest.informo_a_nova_senha(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mconfirmo a nova senha &amp#27;[0m&amp#27;[32m&amp#27;[1m"novaSenha456"&amp#27;[0m                &amp#27;[90m# dominio.usuario.UsuarioTest.confirmo_a_nova_senha(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve atualizar a senha com sucesso&amp#27;[0m       &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_atualizar_a_senha_com_sucesso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha ao alterar senha com senha atual incorreta" classname="Atualização de Perfil do Usuário" time="0.221">
    <system-out><![CDATA[
Scenario: Falha ao alterar senha com senha atual incorreta                &amp#27;[90m# configuracoes_usuario.feature:66&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                                       &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo a senha atual incorreta &amp#27;[0m&amp#27;[32m&amp#27;[1m"errada"&amp#27;[0m                            &amp#27;[90m# dominio.usuario.UsuarioTest.informo_a_senha_atual_incorreta(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32minformo a nova senha &amp#27;[0m&amp#27;[32m&amp#27;[1m"novaSenha456"&amp#27;[0m                                &amp#27;[90m# dominio.usuario.UsuarioTest.informo_a_nova_senha(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mconfirmo a nova senha &amp#27;[0m&amp#27;[32m&amp#27;[1m"novaSenha456"&amp#27;[0m                                &amp#27;[90m# dominio.usuario.UsuarioTest.confirmo_a_nova_senha(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve exibir uma mensagem de erro de senha atual inválida&amp#27;[0m &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_exibir_uma_mensagem_de_erro_de_senha_atual_invalida()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Alterar senha para uma nova senha diferente (sucesso)" classname="Atualização de Perfil do Usuário" time="0.531">
    <system-out><![CDATA[
Scenario: Alterar senha para uma nova senha diferente (sucesso) &amp#27;[90m# configuracoes_usuario.feature:74&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                             &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo a senha atual correta &amp#27;[0m&amp#27;[32m&amp#27;[1m"senha123"&amp#27;[0m                  &amp#27;[90m# dominio.usuario.UsuarioTest.informo_a_senha_atual_correta(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32minformo a nova senha &amp#27;[0m&amp#27;[32m&amp#27;[1m"senhaNova456"&amp#27;[0m                      &amp#27;[90m# dominio.usuario.UsuarioTest.informo_a_nova_senha(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mconfirmo a nova senha &amp#27;[0m&amp#27;[32m&amp#27;[1m"senhaNova456"&amp#27;[0m                      &amp#27;[90m# dominio.usuario.UsuarioTest.confirmo_a_nova_senha(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve atualizar a senha com sucesso&amp#27;[0m             &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_atualizar_a_senha_com_sucesso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha ao tentar alterar senha para a mesma senha atual" classname="Atualização de Perfil do Usuário" time="0.284">
    <system-out><![CDATA[
Scenario: Falha ao tentar alterar senha para a mesma senha atual    &amp#27;[90m# configuracoes_usuario.feature:81&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou logado no sistema&amp#27;[0m                                 &amp#27;[90m# dominio.usuario.UsuarioTest.que_estou_logado_no_sistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32minformo a senha atual correta &amp#27;[0m&amp#27;[32m&amp#27;[1m"senha123"&amp#27;[0m                      &amp#27;[90m# dominio.usuario.UsuarioTest.informo_a_senha_atual_correta(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32minformo a nova senha &amp#27;[0m&amp#27;[32m&amp#27;[1m"senha123"&amp#27;[0m                              &amp#27;[90m# dominio.usuario.UsuarioTest.informo_a_nova_senha(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mconfirmo a nova senha &amp#27;[0m&amp#27;[32m&amp#27;[1m"senha123"&amp#27;[0m                              &amp#27;[90m# dominio.usuario.UsuarioTest.confirmo_a_nova_senha(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve exibir uma mensagem de erro de senha repetida&amp#27;[0m &amp#27;[90m# dominio.usuario.UsuarioTest.o_sistema_deve_exibir_uma_mensagem_de_erro_de_senha_repetida()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cadastro de cartão com todos os campos obrigatórios preenchidos" classname="Cadastro e gestão de cartões de crédito" time="0.008">
    <system-out><![CDATA[
Scenario: Cadastro de cartão com todos os campos obrigatórios preenchidos &amp#27;[90m# gestao_cartoes.feature:7&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário informa todos os campos obrigatórios&amp#27;[0m                &amp#27;[90m# dominio.cartao.CartaoTest.que_o_usuario_informa_todos_os_dados_do_cartao()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32msalvar o cartão&amp#27;[0m                                                    &amp#27;[90m# dominio.cartao.CartaoTest.salvar_o_cartao()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo cartão deve ser cadastrado com sucesso&amp#27;[0m                           &amp#27;[90m# dominio.cartao.CartaoTest.o_cartao_deve_ser_cadastrado_com_sucesso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cadastro de cartão sem informar todos os campos obrigatórios" classname="Cadastro e gestão de cartões de crédito" time="0.006">
    <system-out><![CDATA[
Scenario: Cadastro de cartão sem informar todos os campos obrigatórios &amp#27;[90m# gestao_cartoes.feature:12&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário não informa todos os campos obrigatórios&amp#27;[0m         &amp#27;[90m# dominio.cartao.CartaoTest.que_o_usuario_nao_informa_todos_os_campos_obrigatorios()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mtentar salvar o cartão&amp#27;[0m                                          &amp#27;[90m# dominio.cartao.CartaoTest.tentar_salvar_o_cartao()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve recusar o cadastro e exibir mensagem de erro&amp#27;[0m     &amp#27;[90m# dominio.cartao.CartaoTest.o_sistema_deve_recusar_o_cadastro_e_exibir_mensagem_de_erro()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cadastro de cartão com data de fechamento anterior à de vencimento" classname="Cadastro e gestão de cartões de crédito" time="0.004">
    <system-out><![CDATA[
Scenario: Cadastro de cartão com data de fechamento anterior à de vencimento      &amp#27;[90m# gestao_cartoes.feature:18&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário informa data de fechamento no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m05&amp#27;[0m&amp#27;[32m e vencimento no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m10&amp#27;[0m &amp#27;[90m# dominio.cartao.CartaoTest.que_o_usuario_informa_data_de_fechamento_no_dia_e_vencimento_no_dia(java.lang.Integer,java.lang.Integer)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32msalvar o cartão&amp#27;[0m                                                            &amp#27;[90m# dominio.cartao.CartaoTest.salvar_o_cartao()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo cartão deve ser cadastrado com sucesso&amp#27;[0m                                   &amp#27;[90m# dominio.cartao.CartaoTest.o_cartao_deve_ser_cadastrado_com_sucesso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cadastro de cartão com data de fechamento posterior à de vencimento" classname="Cadastro e gestão de cartões de crédito" time="0.002">
    <system-out><![CDATA[
Scenario: Cadastro de cartão com data de fechamento posterior à de vencimento     &amp#27;[90m# gestao_cartoes.feature:23&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário informa data de fechamento no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m15&amp#27;[0m&amp#27;[32m e vencimento no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m10&amp#27;[0m &amp#27;[90m# dominio.cartao.CartaoTest.que_o_usuario_informa_data_de_fechamento_no_dia_e_vencimento_no_dia(java.lang.Integer,java.lang.Integer)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mtentar salvar o cartão&amp#27;[0m                                                     &amp#27;[90m# dominio.cartao.CartaoTest.tentar_salvar_o_cartao()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve recusar o cadastro e exibir mensagem de erro&amp#27;[0m                &amp#27;[90m# dominio.cartao.CartaoTest.o_sistema_deve_recusar_o_cadastro_e_exibir_mensagem_de_erro()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Registrar despesa dentro do limite disponível" classname="Cadastro e gestão de cartões de crédito" time="0.011">
    <system-out><![CDATA[
Scenario: Registrar despesa dentro do limite disponível     &amp#27;[90m# gestao_cartoes.feature:29&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o cartão possui limite disponível de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m1000.00&amp#27;[0m &amp#27;[90m# dominio.cartao.CartaoTest.que_o_cartao_possui_limite_disponivel_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mregistrar uma despesa de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m200.00&amp#27;[0m                   &amp#27;[90m# dominio.cartao.CartaoTest.registrar_uma_despesa_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma despesa deve ser registrada com sucesso&amp#27;[0m            &amp#27;[90m# dominio.cartao.CartaoTest.a_despesa_deve_ser_registrada_com_sucesso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Registrar despesa acima do limite disponível" classname="Cadastro e gestão de cartões de crédito" time="0.006">
    <system-out><![CDATA[
Scenario: Registrar despesa acima do limite disponível             &amp#27;[90m# gestao_cartoes.feature:34&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o cartão possui limite disponível de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m500.00&amp#27;[0m         &amp#27;[90m# dominio.cartao.CartaoTest.que_o_cartao_possui_limite_disponivel_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mregistrar uma despesa de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m800.00&amp#27;[0m&amp#27;[32m acima do limite&amp#27;[0m          &amp#27;[90m# dominio.cartao.CartaoTest.registrar_uma_despesa_de_r_acima_do_limite(java.lang.Double)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve recusar o registro e exibir mensagem de erro&amp#27;[0m &amp#27;[90m# dominio.cartao.CartaoTest.o_sistema_deve_recusar_o_registro_e_exibir_mensagem_de_erro()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Fechamento de ciclo gera fatura automaticamente" classname="Cadastro e gestão de cartões de crédito" time="0.004">
    <system-out><![CDATA[
Scenario: Fechamento de ciclo gera fatura automaticamente              &amp#27;[90m# gestao_cartoes.feature:40&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o cartão possui ciclo de fechamento definido para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m05&amp#27;[0m &amp#27;[90m# dominio.cartao.CartaoTest.que_o_cartao_possui_ciclo_de_fechamento_definido_para_o_dia(java.lang.Integer)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mchegar o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m05&amp#27;[0m&amp#27;[32m do mês&amp#27;[0m                                          &amp#27;[90m# dominio.cartao.CartaoTest.chegar_o_dia_do_mes(java.lang.Integer)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve gerar automaticamente uma nova fatura&amp#27;[0m            &amp#27;[90m# dominio.cartao.CartaoTest.o_sistema_deve_gerar_automaticamente_uma_nova_fatura()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Não gerar fatura antes da data de fechamento" classname="Cadastro e gestão de cartões de crédito" time="0.004">
    <system-out><![CDATA[
Scenario: Não gerar fatura antes da data de fechamento                 &amp#27;[90m# gestao_cartoes.feature:45&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o cartão possui ciclo de fechamento definido para o dia &amp#27;[0m&amp#27;[32m&amp#27;[1m05&amp#27;[0m &amp#27;[90m# dominio.cartao.CartaoTest.que_o_cartao_possui_ciclo_de_fechamento_definido_para_o_dia(java.lang.Integer)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mestiver no dia &amp#27;[0m&amp#27;[32m&amp#27;[1m03&amp#27;[0m&amp#27;[32m do mês&amp#27;[0m                                        &amp#27;[90m# dominio.cartao.CartaoTest.estiver_no_dia_do_mes(java.lang.Integer)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema não deve gerar fatura&amp#27;[0m                                 &amp#27;[90m# dominio.cartao.CartaoTest.o_sistema_nao_deve_gerar_fatura()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Registrar despesa vinculada a uma fatura aberta" classname="Cadastro e gestão de cartões de crédito" time="0.006">
    <system-out><![CDATA[
Scenario: Registrar despesa vinculada a uma fatura aberta &amp#27;[90m# gestao_cartoes.feature:51&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma fatura aberta para o cartão&amp#27;[0m        &amp#27;[90m# dominio.cartao.CartaoTest.que_existe_uma_fatura_aberta_para_o_cartao()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mregistrar uma despesa no cartão&amp#27;[0m                    &amp#27;[90m# dominio.cartao.CartaoTest.registrar_uma_despesa_no_cartao()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma despesa deve ser vinculada a essa fatura&amp#27;[0m         &amp#27;[90m# dominio.cartao.CartaoTest.a_despesa_deve_ser_vinculada_a_essa_fatura()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Registrar despesa sem fatura aberta" classname="Cadastro e gestão de cartões de crédito" time="0.002">
    <system-out><![CDATA[
Scenario: Registrar despesa sem fatura aberta                      &amp#27;[90m# gestao_cartoes.feature:56&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque não existe fatura aberta para o cartão&amp#27;[0m                 &amp#27;[90m# dominio.cartao.CartaoTest.que_nao_existe_fatura_aberta_para_o_cartao()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mregistrar uma despesa no cartão&amp#27;[0m                             &amp#27;[90m# dominio.cartao.CartaoTest.registrar_uma_despesa_no_cartao()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve recusar o registro e exibir mensagem de erro&amp#27;[0m &amp#27;[90m# dominio.cartao.CartaoTest.o_sistema_deve_recusar_o_registro_e_exibir_mensagem_de_erro()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Atualizar informações de nome, limite e datas do cartão" classname="Cadastro e gestão de cartões de crédito" time="0.004">
    <system-out><![CDATA[
Scenario: Atualizar informações de nome, limite e datas do cartão &amp#27;[90m# gestao_cartoes.feature:62&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o cartão já está cadastrado&amp#27;[0m                           &amp#27;[90m# dominio.cartao.CartaoTest.que_o_cartao_ja_esta_cadastrado()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário altera nome, limite ou datas&amp#27;[0m                     &amp#27;[90m# dominio.cartao.CartaoTest.o_usuario_altera_nome_limite_ou_datas()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve atualizar as informações com sucesso&amp#27;[0m        &amp#27;[90m# dominio.cartao.CartaoTest.o_sistema_deve_atualizar_as_informacoes_com_sucesso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha ao atualizar informações com dados inválidos" classname="Cadastro e gestão de cartões de crédito" time="0.004">
    <system-out><![CDATA[
Scenario: Falha ao atualizar informações com dados inválidos        &amp#27;[90m# gestao_cartoes.feature:67&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o cartão já está cadastrado&amp#27;[0m                             &amp#27;[90m# dominio.cartao.CartaoTest.que_o_cartao_ja_esta_cadastrado()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tenta alterar limite para um valor negativo&amp#27;[0m        &amp#27;[90m# dominio.cartao.CartaoTest.o_usuario_tenta_alterar_limite_para_um_valor_negativo()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve recusar a alteração e exibir mensagem de erro&amp#27;[0m &amp#27;[90m# dominio.cartao.CartaoTest.o_sistema_deve_recusar_a_alteracao_e_exibir_mensagem_de_erro()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cadastro de conta com todos os campos obrigatórios preenchidos" classname="Cadastro e gestão de contas" time="0.005">
    <system-out><![CDATA[
Scenario: Cadastro de conta com todos os campos obrigatórios preenchidos &amp#27;[90m# gestao_contas.feature:7&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário informa nome, tipo e saldo inicial&amp#27;[0m                 &amp#27;[90m# dominio.conta.ContaTest.que_o_usuario_informa_nome_tipo_e_saldo_inicial()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32msalvar a conta&amp#27;[0m                                                    &amp#27;[90m# dominio.conta.ContaTest.salvar_a_conta()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma conta deve ser cadastrada com sucesso&amp#27;[0m                           &amp#27;[90m# dominio.conta.ContaTest.a_conta_deve_ser_cadastrada_com_sucesso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cadastro de conta sem informar todos os campos obrigatórios" classname="Cadastro e gestão de contas" time="0.004">
    <system-out><![CDATA[
Scenario: Cadastro de conta sem informar todos os campos obrigatórios &amp#27;[90m# gestao_contas.feature:12&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário não informa todos os campos obrigatórios&amp#27;[0m        &amp#27;[90m# dominio.cartao.CartaoTest.que_o_usuario_nao_informa_todos_os_campos_obrigatorios()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mtentar salvar a conta&amp#27;[0m                                          &amp#27;[90m# dominio.conta.ContaTest.tentar_salvar_a_conta()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve recusar o cadastro e exibir a mensagem de erro&amp#27;[0m  &amp#27;[90m# dominio.conta.ContaTest.o_sistema_deve_recusar_o_cadastro_e_exibir_a_mensagem_de_erro()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cadastro de conta com nome único no mesmo banco" classname="Cadastro e gestão de contas" time="0.006">
    <system-out><![CDATA[
Scenario: Cadastro de conta com nome único no mesmo banco      &amp#27;[90m# gestao_contas.feature:18&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque já existe uma conta chamada &amp#27;[0m&amp#27;[32m&amp#27;[1m"Corrente Banco X"&amp#27;[0m     &amp#27;[90m# dominio.conta.ContaTest.que_ja_existe_uma_conta_chamada(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário cadastra uma conta chamada &amp#27;[0m&amp#27;[32m&amp#27;[1m"Poupança Banco X"&amp#27;[0m &amp#27;[90m# dominio.conta.ContaTest.o_usuario_cadastra_uma_conta_chamada(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma nova conta deve ser cadastrada com sucesso&amp#27;[0m            &amp#27;[90m# dominio.conta.ContaTest.a_nova_conta_deve_ser_cadastrada_com_sucesso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cadastro de conta duplicada com mesmo nome e banco" classname="Cadastro e gestão de contas" time="0.0">
    <system-out><![CDATA[
Scenario: Cadastro de conta duplicada com mesmo nome e banco            &amp#27;[90m# gestao_contas.feature:23&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque já existe uma conta chamada &amp#27;[0m&amp#27;[32m&amp#27;[1m"Corrente Banco X"&amp#27;[0m              &amp#27;[90m# dominio.conta.ContaTest.que_ja_existe_uma_conta_chamada(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tenta cadastrar outra conta chamada &amp#27;[0m&amp#27;[32m&amp#27;[1m"Corrente Banco X"&amp#27;[0m &amp#27;[90m# dominio.conta.ContaTest.o_usuario_tenta_cadastrar_outra_conta_chamada(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve recusar o cadastro e exibir a mensagem de erro&amp#27;[0m    &amp#27;[90m# dominio.conta.ContaTest.o_sistema_deve_recusar_o_cadastro_e_exibir_a_mensagem_de_erro()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cadastro de conta com saldo inicial maior ou igual a zero" classname="Cadastro e gestão de contas" time="0.006">
    <system-out><![CDATA[
Scenario: Cadastro de conta com saldo inicial maior ou igual a zero &amp#27;[90m# gestao_contas.feature:29&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário informa saldo inicial de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m100,00&amp#27;[0m            &amp#27;[90m# dominio.conta.ContaTest.que_o_usuario_informa_saldo_inicial_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32msalvar a conta&amp#27;[0m                                               &amp#27;[90m# dominio.conta.ContaTest.salvar_a_conta()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma conta deve ser cadastrada com sucesso&amp#27;[0m                      &amp#27;[90m# dominio.conta.ContaTest.a_conta_deve_ser_cadastrada_com_sucesso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Cadastro de conta com saldo inicial negativo" classname="Cadastro e gestão de contas" time="0.006">
    <system-out><![CDATA[
Scenario: Cadastro de conta com saldo inicial negativo               &amp#27;[90m# gestao_contas.feature:34&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário informa saldo inicial de -R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m50,00&amp#27;[0m             &amp#27;[90m# dominio.conta.ContaTest.que_o_usuario_informa_saldo_inicial_de_negativo_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mtentar salvar a conta&amp#27;[0m                                         &amp#27;[90m# dominio.conta.ContaTest.tentar_salvar_a_conta()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve recusar o cadastro e exibir a mensagem de erro&amp#27;[0m &amp#27;[90m# dominio.conta.ContaTest.o_sistema_deve_recusar_o_cadastro_e_exibir_a_mensagem_de_erro()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Realizar depósito com valor positivo" classname="Cadastro e gestão de contas" time="0.004">
    <system-out><![CDATA[
Scenario: Realizar depósito com valor positivo                &amp#27;[90m# gestao_contas.feature:40&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário possui uma conta com saldo de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m500,00&amp#27;[0m &amp#27;[90m# dominio.conta.ContaTest.que_o_usuario_possui_uma_conta_com_saldo_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mrealiza um depósito de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m200,00&amp#27;[0m                       &amp#27;[90m# dominio.conta.ContaTest.realiza_um_deposito_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo saldo da conta deve ser atualizado para R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m700,00&amp#27;[0m    &amp#27;[90m# dominio.conta.ContaTest.o_saldo_da_conta_deve_ser_atualizado_para_r(java.lang.Double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Realizar depósito com valor menor ou igual a zero" classname="Cadastro e gestão de contas" time="0.002">
    <system-out><![CDATA[
Scenario: Realizar depósito com valor menor ou igual a zero           &amp#27;[90m# gestao_contas.feature:45&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário possui uma conta com saldo de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m500,00&amp#27;[0m         &amp#27;[90m# dominio.conta.ContaTest.que_o_usuario_possui_uma_conta_com_saldo_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mtenta realizar um depósito de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m0,00&amp#27;[0m                          &amp#27;[90m# dominio.conta.ContaTest.tenta_realizar_um_deposito_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve recusar a alteração e exibir a mensagem de erro&amp#27;[0m &amp#27;[90m# dominio.conta.ContaTest.o_sistema_deve_recusar_a_alteracao_e_exibir_a_mensagem_de_erro()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Realizar retirada dentro do saldo disponível" classname="Cadastro e gestão de contas" time="0.002">
    <system-out><![CDATA[
Scenario: Realizar retirada dentro do saldo disponível        &amp#27;[90m# gestao_contas.feature:51&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário possui uma conta com saldo de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m300,00&amp#27;[0m &amp#27;[90m# dominio.conta.ContaTest.que_o_usuario_possui_uma_conta_com_saldo_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mrealiza uma retirada de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m100,00&amp#27;[0m                      &amp#27;[90m# dominio.conta.ContaTest.realiza_uma_retirada_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo saldo da conta deve ser atualizado para R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m200,00&amp#27;[0m    &amp#27;[90m# dominio.conta.ContaTest.o_saldo_da_conta_deve_ser_atualizado_para_r(java.lang.Double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Realizar retirada acima do saldo disponível" classname="Cadastro e gestão de contas" time="0.002">
    <system-out><![CDATA[
Scenario: Realizar retirada acima do saldo disponível                 &amp#27;[90m# gestao_contas.feature:56&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário possui uma conta com saldo de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m300,00&amp#27;[0m         &amp#27;[90m# dominio.conta.ContaTest.que_o_usuario_possui_uma_conta_com_saldo_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mtenta realizar uma retirada de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m500,00&amp#27;[0m                       &amp#27;[90m# dominio.conta.ContaTest.tenta_realizar_uma_retirada_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve recusar a alteração e exibir a mensagem de erro&amp#27;[0m &amp#27;[90m# dominio.conta.ContaTest.o_sistema_deve_recusar_a_alteracao_e_exibir_a_mensagem_de_erro()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Adicionar uma nova categoria que não existe" classname="Gestão de Categorias" time="0.01">
    <system-out><![CDATA[
Scenario: Adicionar uma nova categoria que não existe           &amp#27;[90m# gestao_de_categorias.feature:8&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque não existe uma categoria chamada &amp#27;[0m&amp#27;[32m&amp#27;[1m"Saúde"&amp#27;[0m&amp#27;[32m no sistema&amp#27;[0m &amp#27;[90m# dominio.categoria.CategoriaTest.queNaoExisteUmaCategoriaChamada(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário insere o nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Saúde"&amp#27;[0m&amp#27;[32m e salva&amp#27;[0m                  &amp#27;[90m# dominio.categoria.CategoriaTest.oUsuarioInsereONomeESalva(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Saúde"&amp#27;[0m&amp#27;[32m deve aparecer na lista de categorias&amp#27;[0m &amp#27;[90m# dominio.categoria.CategoriaTest.aCategoriaDeveAparecerNaLista(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Tentar excluir uma categoria que não existe" classname="Gestão de Categorias" time="0.004">
    <system-out><![CDATA[
Scenario: Tentar excluir uma categoria que não existe                        &amp#27;[90m# gestao_de_categorias.feature:13&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque não existe uma categoria chamada &amp#27;[0m&amp#27;[32m&amp#27;[1m"Investimentos"&amp#27;[0m&amp#27;[32m no sistema&amp#27;[0m      &amp#27;[90m# dominio.categoria.CategoriaTest.queNaoExisteUmaCategoriaChamada(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário escolhe deletar a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Investimentos"&amp#27;[0m                 &amp#27;[90m# dominio.categoria.CategoriaTest.oUsuarioEscolheDeletarACategoria(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve exibir uma mensagem de erro &amp#27;[0m&amp#27;[32m&amp#27;[1m"Categoria não encontrada"&amp#27;[0m &amp#27;[90m# dominio.categoria.CategoriaTest.oSistemaDeveExibirUmaMensagemDeErro(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Tentar adicionar uma categoria que já existe" classname="Gestão de Categorias" time="0.01">
    <system-out><![CDATA[
Scenario: Tentar adicionar uma categoria que já existe                  &amp#27;[90m# gestao_de_categorias.feature:18&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Moradia"&amp#27;[0m&amp#27;[32m já existe na lista&amp#27;[0m                    &amp#27;[90m# dominio.categoria.CategoriaTest.queACategoriaJaExisteNaLista(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tenta criar uma nova categoria com o nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Moradia"&amp#27;[0m    &amp#27;[90m# dominio.categoria.CategoriaTest.oUsuarioTentaCriarUmaNovaCategoriaComONome(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve exibir uma mensagem de erro &amp#27;[0m&amp#27;[32m&amp#27;[1m"Categoria já existe"&amp#27;[0m &amp#27;[90m# dominio.categoria.CategoriaTest.oSistemaDeveExibirUmaMensagemDeErro(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32ma lista de categorias não deve ser alterada&amp#27;[0m                       &amp#27;[90m# dominio.categoria.CategoriaTest.aListaDeCategoriasNaoDeveSerAlterada()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Deletar uma categoria que não está em uso" classname="Gestão de Categorias" time="0.014">
    <system-out><![CDATA[
Scenario: Deletar uma categoria que não está em uso                &amp#27;[90m# gestao_de_categorias.feature:24&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Moradia"&amp#27;[0m&amp#27;[32m já existe na lista&amp#27;[0m               &amp#27;[90m# dominio.categoria.CategoriaTest.queACategoriaJaExisteNaLista(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mnão existe nenhuma transação associada à categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Moradia"&amp#27;[0m &amp#27;[90m# dominio.categoria.CategoriaTest.naoExisteNenhumaTransacaoAssociadaACategoria(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário escolhe deletar a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Moradia"&amp#27;[0m             &amp#27;[90m# dominio.categoria.CategoriaTest.oUsuarioEscolheDeletarACategoria(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Moradia"&amp#27;[0m&amp#27;[32m deve ser removida da lista&amp#27;[0m            &amp#27;[90m# dominio.categoria.CategoriaTest.aCategoriaDeveSerRemovidaDaLista(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Tentar deletar uma categoria que está em uso" classname="Gestão de Categorias" time="0.006">
    <system-out><![CDATA[
Scenario: Tentar deletar uma categoria que está em uso                                               &amp#27;[90m# gestao_de_categorias.feature:30&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Moradia"&amp#27;[0m&amp#27;[32m já existe na lista&amp#27;[0m                                                 &amp#27;[90m# dominio.categoria.CategoriaTest.queACategoriaJaExisteNaLista(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mexiste pelo menos uma transação associada à categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Moradia"&amp#27;[0m                                &amp#27;[90m# dominio.categoria.CategoriaTest.existePeloMenosUmaTransacaoAssociadaACategoria(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário escolhe deletar a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Moradia"&amp#27;[0m                                               &amp#27;[90m# dominio.categoria.CategoriaTest.oUsuarioEscolheDeletarACategoria(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve exibir uma mensagem de erro &amp#27;[0m&amp#27;[32m&amp#27;[1m"Categoria não pode ser excluída pois está em uso"&amp#27;[0m &amp#27;[90m# dominio.categoria.CategoriaTest.oSistemaDeveExibirUmaMensagemDeErro(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32ma lista de categorias não deve ser alterada&amp#27;[0m                                                    &amp#27;[90m# dominio.categoria.CategoriaTest.aListaDeCategoriasNaoDeveSerAlterada()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Adicionar um limite de gastos com sucesso" classname="Gestão de Orçamentos" time="0.013">
    <system-out><![CDATA[
Scenario: Adicionar um limite de gastos com sucesso                                                 &amp#27;[90m# gestao_de_orcamentos.feature:8&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m para um usuário autenticado como &amp#27;[0m&amp#27;[32m&amp#27;[1m"Gabriel"&amp#27;[0m             &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeCategoriaUsuario(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário define um orçamento de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m&amp#27;[32m para a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m no mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.defineOrcamento(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo usuário deve ver o orçamento salvo para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m&amp#27;[32m com valor &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m   &amp#27;[90m# dominio.orcamento.OrcamentoTest.deveVerOrcamentoSalvoParaCategoriaMesValor(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Impedir a criação de limite duplicado" classname="Gestão de Orçamentos" time="0.013">
    <system-out><![CDATA[
Scenario: Impedir a criação de limite duplicado                                            &amp#27;[90m# gestao_de_orcamentos.feature:13&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m para um usuário autenticado como &amp#27;[0m&amp#27;[32m&amp#27;[1m"Gabriel"&amp#27;[0m    &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeCategoriaUsuario(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mexiste um orçamento de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m&amp#27;[32m para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m                   &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeUmOrcamento(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tenta definir um orçamento de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 120,00"&amp#27;[0m&amp#27;[32m para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioTentaDefinirDuplicado(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve retornar &amp#27;[0m&amp#27;[32m&amp#27;[1m"Já existe um orçamento para esta categoria neste mês"&amp#27;[0m      &amp#27;[90m# dominio.orcamento.OrcamentoTest.sistemaDeveRetornar(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo orçamento não deve ser salvo&amp#27;[0m                                                       &amp#27;[90m# dominio.orcamento.OrcamentoTest.orcamentoNaoDeveSerSalvo()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Permitir criação de orçamento no mês seguinte para a mesma categoria" classname="Gestão de Orçamentos" time="0.004">
    <system-out><![CDATA[
Scenario: Permitir criação de orçamento no mês seguinte para a mesma categoria                      &amp#27;[90m# gestao_de_orcamentos.feature:20&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m para um usuário autenticado como &amp#27;[0m&amp#27;[32m&amp#27;[1m"Gabriel"&amp#27;[0m             &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeCategoriaUsuario(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mexiste um orçamento de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m&amp#27;[32m para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m                            &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeUmOrcamento(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário define um orçamento de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 150,00"&amp#27;[0m&amp#27;[32m para a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m no mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/2025"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.defineOrcamento(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo usuário deve ver o orçamento salvo para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/2025"&amp#27;[0m&amp#27;[32m com valor &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 150,00"&amp#27;[0m   &amp#27;[90m# dominio.orcamento.OrcamentoTest.deveVerOrcamentoSalvoParaCategoriaMesValor(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Atualizar um limite de gastos" classname="Gestão de Orçamentos" time="0.008">
    <system-out><![CDATA[
Scenario: Atualizar um limite de gastos                                                        &amp#27;[90m# gestao_de_orcamentos.feature:26&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um orçamento na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m para o mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m&amp#27;[32m de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeUmOrcamentoNaCategoriaParaOMes(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário atualiza esse orçamento para &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 600,00"&amp#27;[0m                                      &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioAtualizaEsseOrcamentoPara(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve retornar &amp#27;[0m&amp#27;[32m&amp#27;[1m"Atualizado com sucesso"&amp#27;[0m                                        &amp#27;[90m# dominio.orcamento.OrcamentoTest.sistemaDeveRetornar(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo usuário deve ver o orçamento salvo com valor &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 600,00"&amp#27;[0m                               &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioDeveVerOrcamentoSalvoComValor(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Notificar ao atingir 80% do limite" classname="Gestão de Orçamentos" time="0.004">
    <system-out><![CDATA[
Scenario: Notificar ao atingir 80% do limite                                                        &amp#27;[90m# gestao_de_orcamentos.feature:33&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m com gasto limite de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m&amp#27;[32m para o mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeCategoriaComLimiteParaOMes(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo gasto acumulado do usuário para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m&amp#27;[32m é de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 79,00"&amp#27;[0m                  &amp#27;[90m# dominio.orcamento.OrcamentoTest.gastoAcumuladoDoUsuarioEh(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário registra uma despesa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 1,00"&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m          &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioRegistraUmaDespesa(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve enviar ao usuário uma notificação &amp#27;[0m&amp#27;[32m&amp#27;[1m"Você atingiu 80% do limite definido"&amp#27;[0m       &amp#27;[90m# dominio.orcamento.OrcamentoTest.sistemaDeveEnviarNotificacao(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Não notificar abaixo de 80%" classname="Gestão de Orçamentos" time="0.004">
    <system-out><![CDATA[
Scenario: Não notificar abaixo de 80%                                                               &amp#27;[90m# gestao_de_orcamentos.feature:39&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m com gasto limite de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m&amp#27;[32m para o mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeCategoriaComLimiteParaOMes(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo gasto acumulado do usuário para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m&amp#27;[32m é de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 79,99"&amp#27;[0m                  &amp#27;[90m# dominio.orcamento.OrcamentoTest.gastoAcumuladoDoUsuarioEh(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário registra uma despesa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 0,00"&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m          &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioRegistraUmaDespesa(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema não deve notificar o usuário&amp#27;[0m                                                       &amp#27;[90m# dominio.orcamento.OrcamentoTest.sistemaNaoDeveNotificar()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Notificar ao atingir 100% do limite" classname="Gestão de Orçamentos" time="0.006">
    <system-out><![CDATA[
Scenario: Notificar ao atingir 100% do limite                                                       &amp#27;[90m# gestao_de_orcamentos.feature:45&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m com gasto limite de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m&amp#27;[32m para o mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeCategoriaComLimiteParaOMes(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo gasto acumulado do usuário para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m&amp#27;[32m é de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 99,00"&amp#27;[0m                  &amp#27;[90m# dominio.orcamento.OrcamentoTest.gastoAcumuladoDoUsuarioEh(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário registra uma despesa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 1,00"&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m          &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioRegistraUmaDespesa(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve enviar ao usuário uma notificação &amp#27;[0m&amp#27;[32m&amp#27;[1m"Você atingiu 100% do limite definido"&amp#27;[0m      &amp#27;[90m# dominio.orcamento.OrcamentoTest.sistemaDeveEnviarNotificacao(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Notificar ao exceder 100% do limite" classname="Gestão de Orçamentos" time="0.006">
    <system-out><![CDATA[
Scenario: Notificar ao exceder 100% do limite                                                       &amp#27;[90m# gestao_de_orcamentos.feature:51&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m com gasto limite de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m&amp#27;[32m para o mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeCategoriaComLimiteParaOMes(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo gasto acumulado do usuário para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m&amp#27;[32m é de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m                 &amp#27;[90m# dominio.orcamento.OrcamentoTest.gastoAcumuladoDoUsuarioEh(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário registra uma despesa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 1,00"&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m          &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioRegistraUmaDespesa(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve enviar ao usuário uma notificação &amp#27;[0m&amp#27;[32m&amp#27;[1m"Você excedeu o limite desta categoria"&amp#27;[0m     &amp#27;[90m# dominio.orcamento.OrcamentoTest.sistemaDeveEnviarNotificacao(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Aceitar quando o valor do orçamento é positivo" classname="Gestão de Orçamentos" time="0.002">
    <system-out><![CDATA[
Scenario: Aceitar quando o valor do orçamento é positivo                                           &amp#27;[90m# gestao_de_orcamentos.feature:58&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m para um usuário autenticado como &amp#27;[0m&amp#27;[32m&amp#27;[1m"Gabriel"&amp#27;[0m            &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeCategoriaUsuario(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário define um orçamento de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 50,00"&amp#27;[0m&amp#27;[32m para a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m no mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.defineOrcamento(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo usuário deve ver o orçamento salvo com valor &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 50,00"&amp#27;[0m                                   &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioDeveVerOrcamentoSalvoComValor(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Rejeitar quando o valor do orçamento é negativo" classname="Gestão de Orçamentos" time="0.01">
    <system-out><![CDATA[
Scenario: Rejeitar quando o valor do orçamento é negativo                                                  &amp#27;[90m# gestao_de_orcamentos.feature:63&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m para um usuário autenticado como &amp#27;[0m&amp#27;[32m&amp#27;[1m"Gabriel"&amp#27;[0m                    &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeCategoriaUsuario(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tenta definir um orçamento de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ -50,00"&amp#27;[0m&amp#27;[32m para a categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m no mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioTentaDefinirValor(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve retornar &amp#27;[0m&amp#27;[32m&amp#27;[1m"Valor do orçamento deve ser maior que zero"&amp#27;[0m                                &amp#27;[90m# dominio.orcamento.OrcamentoTest.sistemaDeveRetornar(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo orçamento não deve ser aplicado&amp#27;[0m                                                                    &amp#27;[90m# dominio.orcamento.OrcamentoTest.orcamentoNaoDeveSerAplicado()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Somar múltiplas despesas dentro do mês para calcular o progresso" classname="Gestão de Orçamentos" time="0.015">
    <system-out><![CDATA[
Scenario: Somar múltiplas despesas dentro do mês para calcular o progresso                          &amp#27;[90m# gestao_de_orcamentos.feature:70&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m com gasto limite de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m&amp#27;[32m para o mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeCategoriaComLimiteParaOMes(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo gasto acumulado do usuário para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m&amp#27;[32m é de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 0,00"&amp#27;[0m                   &amp#27;[90m# dominio.orcamento.OrcamentoTest.gastoAcumuladoDoUsuarioEh(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário registra uma despesa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 30,00"&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m         &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioRegistraUmaDespesa(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo usuário registra uma despesa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 20,00"&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m          &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioRegistraUmaDespesa(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve mostrar que o total gasto para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m&amp#27;[32m é de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 50,00"&amp#27;[0m     &amp#27;[90m# dominio.orcamento.OrcamentoTest.sistemaDeveMostrarQueOTotalGastoParaEmEDe(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo sistema deve mostrar que o progresso de uso do orçamento é &amp#27;[0m&amp#27;[32m&amp#27;[1m"50%"&amp#27;[0m                            &amp#27;[90m# dominio.orcamento.OrcamentoTest.sistemaDeveMostrarQueOProgressoDeUsoDoOrcamentoE(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Ignorar despesas de outra categoria ou outro mês no cálculo do progresso" classname="Gestão de Orçamentos" time="0.004">
    <system-out><![CDATA[
Scenario: Ignorar despesas de outra categoria ou outro mês no cálculo do progresso                  &amp#27;[90m# gestao_de_orcamentos.feature:78&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m com gasto limite de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 100,00"&amp#27;[0m&amp#27;[32m para o mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeCategoriaComLimiteParaOMes(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo gasto acumulado do usuário para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m&amp#27;[32m é de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 0,00"&amp#27;[0m                   &amp#27;[90m# dominio.orcamento.OrcamentoTest.gastoAcumuladoDoUsuarioEh(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mexiste uma categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Transporte"&amp#27;[0m&amp#27;[32m com gasto limite de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 200,00"&amp#27;[0m&amp#27;[32m para o mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m        &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeUmaCategoriaComGastoLimiteDeParaOMes(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mexiste uma categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m com gasto limite de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 80,00"&amp#27;[0m&amp#27;[32m para o mês &amp#27;[0m&amp#27;[32m&amp#27;[1m"08/2025"&amp#27;[0m        &amp#27;[90m# dominio.orcamento.OrcamentoTest.existeUmaCategoriaComGastoLimiteDeParaOMes(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário registra uma despesa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 40,00"&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Transporte"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m          &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioRegistraUmaDespesa(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo usuário registra uma despesa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 25,00"&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"08/2025"&amp#27;[0m          &amp#27;[90m# dominio.orcamento.OrcamentoTest.usuarioRegistraUmaDespesa(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve mostrar que o total gasto para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"09/2025"&amp#27;[0m&amp#27;[32m permanece &amp#27;[0m&amp#27;[32m&amp#27;[1m"R$ 0,00"&amp#27;[0m &amp#27;[90m# dominio.orcamento.OrcamentoTest.sistemaDeveMostrarQueOTotalGastoParaEmPermanece(java.lang.String,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo sistema deve mostrar que o progresso de uso do orçamento é &amp#27;[0m&amp#27;[32m&amp#27;[1m"0%"&amp#27;[0m                             &amp#27;[90m# dominio.orcamento.OrcamentoTest.sistemaDeveMostrarQueOProgressoDeUsoDoOrcamentoE(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Registrar gasto associado a um perfil com sucesso" classname="Gestão de Perfis Familiares" time="0.032">
    <system-out><![CDATA[
Scenario: Registrar gasto associado a um perfil com sucesso                                  &amp#27;[90m# gestao_de_perfis_familiares.feature:3&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um perfil &amp#27;[0m&amp#27;[32m&amp#27;[1m"Filho"&amp#27;[0m                                                         &amp#27;[90m# dominio.gestaoDePerfis.GestaoDePerfisTest.criarPerfil(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu registro uma nova despesa de &amp#27;[0m&amp#27;[32m&amp#27;[1m200.0&amp#27;[0m&amp#27;[32m reais para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Cinema"&amp#27;[0m&amp#27;[32m, e seleciono o perfil Filho&amp#27;[0m &amp#27;[90m# dominio.gestaoDePerfis.GestaoDePerfisTest.registrarDespesa(double,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma transação deve ser registrada no sistema no perfil Filho&amp#27;[0m                            &amp#27;[90m# dominio.gestaoDePerfis.GestaoDePerfisTest.registroDeTransacao()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Tentativa de registrar gasto sem selecionar perfil" classname="Gestão de Perfis Familiares" time="0.002">
    <system-out><![CDATA[
Scenario: Tentativa de registrar gasto sem selecionar perfil                                           &amp#27;[90m# gestao_de_perfis_familiares.feature:8&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existem perfis cadastrados&amp#27;[0m                                                                 &amp#27;[90m# dominio.gestaoDePerfis.GestaoDePerfisTest.criarPerfis()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu registro uma nova despesa de &amp#27;[0m&amp#27;[32m&amp#27;[1m150.0&amp#27;[0m&amp#27;[32m reais para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Restaurante"&amp#27;[0m&amp#27;[32m, mas não seleciono nenhum perfil&amp#27;[0m &amp#27;[90m# dominio.gestaoDePerfis.GestaoDePerfisTest.registroSemPefil(double,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve impedir o registro da transacao no sistema&amp#27;[0m                                       &amp#27;[90m# dominio.gestaoDePerfis.GestaoDePerfisTest.impedirResistro()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mdeve exibir uma mensagem informando que é obrigatório a seleção de um perfil&amp#27;[0m                     &amp#27;[90m# dominio.gestaoDePerfis.GestaoDePerfisTest.exibirMensagem()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Criar uma transação única pendente" classname="Gestão de Contas a Pagar" time="0.005">
    <system-out><![CDATA[
Scenario: Criar uma transação única pendente                               &amp#27;[90m# gestão_de_contas_a_pagar.feature:7&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mo usuário possui uma conta com saldo &amp#27;[0m&amp#27;[32m&amp#27;[1m"1000.00"&amp#27;[0m                     &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oUsuarioPossuiUmaContaComSaldo(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário cria uma transação única &amp#27;[0m&amp#27;[32m&amp#27;[1m"Compra de material"&amp#27;[0m&amp#27;[32m de &amp#27;[0m&amp#27;[32m&amp#27;[1m"200.00"&amp#27;[0m &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oUsuarioCriaUmaTransacaoUnica(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma transação deve estar registrada com status &amp#27;[0m&amp#27;[32m&amp#27;[1m"Pendente"&amp#27;[0m             &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.aTransacaoDeveEstarRegistradaComStatus(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo saldo da conta deve permanecer &amp#27;[0m&amp#27;[32m&amp#27;[1m"1000.00"&amp#27;[0m                           &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oSaldoDaContaDevePermanecer(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Editar uma transação pendente única" classname="Gestão de Contas a Pagar" time="0.004">
    <system-out><![CDATA[
Scenario: Editar uma transação pendente única                                              &amp#27;[90m# gestão_de_contas_a_pagar.feature:13&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste uma transação única pendente de &amp#27;[0m&amp#27;[32m&amp#27;[1m"200.00"&amp#27;[0m&amp#27;[32m com descrição &amp#27;[0m&amp#27;[32m&amp#27;[1m"Compra de material"&amp#27;[0m &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.existeUmaTransacaoUnicaPendente(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário altera o valor para &amp#27;[0m&amp#27;[32m&amp#27;[1m"250.00"&amp#27;[0m                                              &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oUsuarioAlteraOValorPara(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma transação deve refletir o novo valor &amp#27;[0m&amp#27;[32m&amp#27;[1m"250.00"&amp#27;[0m                                     &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.aTransacaoDeveRefletirONovoValor(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo status deve permanecer &amp#27;[0m&amp#27;[32m&amp#27;[1m"Pendente"&amp#27;[0m                                                  &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oStatusDevePermanecer(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Deletar uma transação pendente única" classname="Gestão de Contas a Pagar" time="0.002">
    <system-out><![CDATA[
Scenario: Deletar uma transação pendente única          &amp#27;[90m# gestão_de_contas_a_pagar.feature:19&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste uma transação única pendente de &amp#27;[0m&amp#27;[32m&amp#27;[1m"250.00"&amp#27;[0m &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.existeUmaTransacaoUnicaPendenteDe(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo usuário possui uma conta com saldo &amp#27;[0m&amp#27;[32m&amp#27;[1m"1000.00"&amp#27;[0m    &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oUsuarioPossuiUmaContaComSaldo(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário deleta essa transação&amp#27;[0m                  &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oUsuarioDeletaEssaTransacao()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma transação não deve mais existir no sistema&amp#27;[0m     &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.aTransacaoNaoDeveMaisExistirNoSistema()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo saldo da conta deve permanecer &amp#27;[0m&amp#27;[32m&amp#27;[1m"1000.00"&amp#27;[0m        &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oSaldoDaContaDevePermanecer(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Efetivar pagamento de uma transação única" classname="Gestão de Contas a Pagar" time="0.004">
    <system-out><![CDATA[
Scenario: Efetivar pagamento de uma transação única     &amp#27;[90m# gestão_de_contas_a_pagar.feature:26&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste uma transação única pendente de &amp#27;[0m&amp#27;[32m&amp#27;[1m"250.00"&amp#27;[0m &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.existeUmaTransacaoUnicaPendenteDe(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo usuário possui uma conta com saldo &amp#27;[0m&amp#27;[32m&amp#27;[1m"1000.00"&amp#27;[0m    &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oUsuarioPossuiUmaContaComSaldo(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário marca a transação como &amp#27;[0m&amp#27;[32m&amp#27;[1m"Efetivada"&amp#27;[0m     &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oUsuarioMarcaATransacaoComo(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo status da transação deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"Efetivada"&amp#27;[0m       &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oStatusDaTransacaoDeveSer(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo valor da transação deve ser debitado da conta&amp#27;[0m   &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oValorDaTransacaoDeveSerDebitadoDaConta()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo saldo da conta deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"750.00"&amp#27;[0m                &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oSaldoDaContaDeveSer(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Notificação de transações próximas do vencimento" classname="Gestão de Contas a Pagar" time="0.002">
    <system-out><![CDATA[
Scenario: Notificação de transações próximas do vencimento            &amp#27;[90m# gestão_de_contas_a_pagar.feature:35&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mexiste uma transação pendente com vencimento para amanhã&amp#27;[0m      &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.existeUmaTransacaoPendenteComVencimentoParaAmanha()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo sistema verifica transações pendentes próximas do vencimento&amp#27;[0m &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.oSistemaVerificaTransacoesPendentesProximasDoVencimento()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mdeve ser gerada uma notificação para o usuário&amp#27;[0m                 &amp#27;[90m# dominio.contasapagar.ContasAPagarTest.deveSerGeradaUmaNotificacaoParaOUsuario()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Efetivar transação com saldo insuficiente" classname="Gestão de Contas a Pagar" time="0.004">
    <system-out><![CDATA[
Scenario: Efetivar transação com saldo insuficiente &amp#27;[90m# gestão_de_contas_a_pagar.feature:40&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Fazer um aporte (contribuição) com saldo suficiente" classname="Metas de Poupança" time="0.018">
    <system-out><![CDATA[
Scenario: Fazer um aporte (contribuição) com saldo suficiente                             &amp#27;[90m# metas_de_poupanca.feature:8&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque eu tenho uma meta de poupança &amp#27;[0m&amp#27;[32m&amp#27;[1m"Viagem de Férias"&amp#27;[0m&amp#27;[32m com saldo atual de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m500.00&amp#27;[0m &amp#27;[90m# dominio.meta.MetaTest.queEuTenhoUmaMetaDePoupancaComSaldoAtualDe(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo saldo da minha Conta principal é de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m1000.00&amp#27;[0m                                    &amp#27;[90m# dominio.meta.MetaTest.oSaldoDaMinhaContaPrincipalEDe(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu faço um aporte de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m200.00&amp#27;[0m&amp#27;[32m para a meta &amp#27;[0m&amp#27;[32m&amp#27;[1m"Viagem de Férias"&amp#27;[0m                      &amp#27;[90m# dominio.meta.MetaTest.euFacoUmAporteDeParaAMeta(java.lang.Double,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo saldo da meta &amp#27;[0m&amp#27;[32m&amp#27;[1m"Viagem de Férias"&amp#27;[0m&amp#27;[32m deve ser R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m700.00&amp#27;[0m                              &amp#27;[90m# dominio.meta.MetaTest.oSaldoDaMetaDeveSer(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo saldo da minha Conta principal deve ser R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m800.00&amp#27;[0m                                 &amp#27;[90m# dominio.meta.MetaTest.oSaldoDaMinhaContaPrincipalDeveSer(java.lang.Double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Tentar fazer um aporte com saldo insuficiente" classname="Metas de Poupança" time="0.005">
    <system-out><![CDATA[
Scenario: Tentar fazer um aporte com saldo insuficiente                                 &amp#27;[90m# metas_de_poupanca.feature:15&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque eu tenho uma meta de poupança &amp#27;[0m&amp#27;[32m&amp#27;[1m"Celular Novo"&amp#27;[0m&amp#27;[32m com saldo atual de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m100.00&amp#27;[0m   &amp#27;[90m# dominio.meta.MetaTest.queEuTenhoUmaMetaDePoupancaComSaldoAtualDe(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo saldo da minha Conta principal é de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m50.00&amp#27;[0m                                    &amp#27;[90m# dominio.meta.MetaTest.oSaldoDaMinhaContaPrincipalEDe(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu tento fazer um aporte de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m100.00&amp#27;[0m&amp#27;[32m para a meta &amp#27;[0m&amp#27;[32m&amp#27;[1m"Celular Novo"&amp#27;[0m                 &amp#27;[90m# dominio.meta.MetaTest.euTentoFazerUmAporteDeParaAMeta(java.lang.Double,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve exibir a mensagem de erro &amp#27;[0m&amp#27;[32m&amp#27;[1m"Saldo insuficiente na conta principal"&amp#27;[0m &amp#27;[90m# dominio.meta.MetaTest.oSistemaDeveExibirAMensagemDeErro(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo saldo da meta &amp#27;[0m&amp#27;[32m&amp#27;[1m"Celular Novo"&amp#27;[0m&amp#27;[32m deve permanecer R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m100.00&amp#27;[0m                          &amp#27;[90m# dominio.meta.MetaTest.oSaldoDaMetaDevePermanecer(java.lang.String,java.lang.Double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Criar uma nova meta de poupança com sucesso" classname="Metas de Poupança" time="0.019">
    <system-out><![CDATA[
Scenario: Criar uma nova meta de poupança com sucesso                                                                  &amp#27;[90m# metas_de_poupanca.feature:22&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque não existe uma meta de poupança chamada &amp#27;[0m&amp#27;[32m&amp#27;[1m"Carro Novo"&amp#27;[0m                                                       &amp#27;[90m# dominio.meta.MetaTest.que_nao_existe_uma_meta_de_poupanca_chamada(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário cria uma nova meta de poupança chamada &amp#27;[0m&amp#27;[32m&amp#27;[1m"Carro Novo"&amp#27;[0m&amp#27;[32m com valor alvo de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m30000.00&amp#27;[0m&amp#27;[32m e prazo de &amp#27;[0m&amp#27;[32m&amp#27;[1m24&amp#27;[0m&amp#27;[32m meses&amp#27;[0m &amp#27;[90m# dominio.meta.MetaTest.o_usuario_cria_uma_nova_meta_de_poupanca_chamada(java.lang.String,java.lang.Double,int)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32muma meta chamada &amp#27;[0m&amp#27;[32m&amp#27;[1m"Carro Novo"&amp#27;[0m&amp#27;[32m deve existir no sistema&amp#27;[0m                                                           &amp#27;[90m# dominio.meta.MetaTest.uma_meta_chamada_deve_existir_no_sistema(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Concluir uma meta de poupança ao fazer o último aporte" classname="Metas de Poupança" time="0.017">
    <system-out><![CDATA[
Scenario: Concluir uma meta de poupança ao fazer o último aporte                       &amp#27;[90m# metas_de_poupanca.feature:27&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque eu tenho uma meta de poupança &amp#27;[0m&amp#27;[32m&amp#27;[1m"Playstation 6"&amp#27;[0m&amp#27;[32m com valor alvo de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m5000.00&amp#27;[0m &amp#27;[90m# dominio.meta.MetaTest.que_eu_tenho_uma_meta_de_poupanca_com_valor_alvo_de(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo saldo atual da meta é de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m4900.00&amp#27;[0m                                            &amp#27;[90m# dominio.meta.MetaTest.o_saldo_atual_da_meta_e_de_r$(java.lang.Double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo saldo da minha Conta principal é de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m200.00&amp#27;[0m                                  &amp#27;[90m# dominio.meta.MetaTest.oSaldoDaMinhaContaPrincipalEDe(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu faço um aporte de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m100.00&amp#27;[0m&amp#27;[32m para a meta &amp#27;[0m&amp#27;[32m&amp#27;[1m"Playstation 6"&amp#27;[0m                      &amp#27;[90m# dominio.meta.MetaTest.euFacoUmAporteDeParaAMeta(java.lang.Double,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo saldo da meta &amp#27;[0m&amp#27;[32m&amp#27;[1m"Playstation 6"&amp#27;[0m&amp#27;[32m deve ser R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m5000.00&amp#27;[0m                             &amp#27;[90m# dominio.meta.MetaTest.oSaldoDaMetaDeveSer(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo status da meta &amp#27;[0m&amp#27;[32m&amp#27;[1m"Playstation 6"&amp#27;[0m&amp#27;[32m deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"CONCLUIDA"&amp#27;[0m                            &amp#27;[90m# dominio.meta.MetaTest.o_status_da_meta_deve_ser(java.lang.String,java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Excluir uma meta de poupança existente" classname="Metas de Poupança" time="0.004">
    <system-out><![CDATA[
Scenario: Excluir uma meta de poupança existente                        &amp#27;[90m# metas_de_poupanca.feature:35&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque eu tenho uma meta de poupança &amp#27;[0m&amp#27;[32m&amp#27;[1m"Casa Nova"&amp#27;[0m&amp#27;[32m criada no sistema&amp#27;[0m &amp#27;[90m# dominio.meta.MetaTest.que_eu_tenho_uma_meta_de_poupanca_criada_no_sistema(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário exclui a meta &amp#27;[0m&amp#27;[32m&amp#27;[1m"Casa Nova"&amp#27;[0m                              &amp#27;[90m# dominio.meta.MetaTest.o_usuario_exclui_a_meta(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma meta &amp#27;[0m&amp#27;[32m&amp#27;[1m"Casa Nova"&amp#27;[0m&amp#27;[32m não deve mais existir no sistema&amp#27;[0m              &amp#27;[90m# dominio.meta.MetaTest.a_meta_nao_deve_mais_existir_no_sistema(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Criar uma meta inversa válida" classname="Gestão de Metas de Redução de Dívidas" time="0.016">
    <system-out><![CDATA[
Scenario: Criar uma meta inversa válida                                                &amp#27;[90m# metas_de_redução_de_dívidas.feature:9&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário possui uma conta com saldo &amp#27;[0m&amp#27;[32m&amp#27;[1m"1500.00"&amp#27;[0m                             &amp#27;[90m# dominio.meta.MetaInversaTest.queUsuarioPossuiConta(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário cria uma meta inversa com nome &amp#27;[0m&amp#27;[32m&amp#27;[1m"Quitar Cartão"&amp#27;[0m&amp#27;[32m e valor alvo &amp#27;[0m&amp#27;[32m&amp#27;[1m"1000.00"&amp#27;[0m &amp#27;[90m# dominio.meta.MetaInversaTest.usuarioCriaMeta(java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma meta deve ser criada com status &amp#27;[0m&amp#27;[32m&amp#27;[1m"ATIVA"&amp#27;[0m                                       &amp#27;[90m# dominio.meta.MetaInversaTest.metaDeveTerStatus(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo valor amortizado inicial deve ser 0.00&amp#27;[0m                                         &amp#27;[90m# dominio.meta.MetaInversaTest.valorAmortizadoInicial()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Realizar um aporte válido" classname="Gestão de Metas de Redução de Dívidas" time="0.006">
    <system-out><![CDATA[
Scenario: Realizar um aporte válido                                    &amp#27;[90m# metas_de_redução_de_dívidas.feature:14&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário possui uma conta com saldo &amp#27;[0m&amp#27;[32m&amp#27;[1m"1500.00"&amp#27;[0m             &amp#27;[90m# dominio.meta.MetaInversaTest.queUsuarioPossuiConta(java.lang.String)&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma meta inversa ativa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"1000.00"&amp#27;[0m                 &amp#27;[90m# dominio.meta.MetaInversaTest.existeMetaAtiva(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário realiza um aporte de &amp#27;[0m&amp#27;[32m&amp#27;[1m"400.00"&amp#27;[0m&amp#27;[32m para amortizar a dívida&amp#27;[0m &amp#27;[90m# dominio.meta.MetaInversaTest.usuarioRealizaAporte(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo valor amortizado deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"400.00"&amp#27;[0m                            &amp#27;[90m# dominio.meta.MetaInversaTest.valorAmortizado(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo progresso deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"0.40"&amp#27;[0m                                      &amp#27;[90m# dominio.meta.MetaInversaTest.progressoEsperado(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Concluir meta ao atingir o valor da dívida" classname="Gestão de Metas de Redução de Dívidas" time="0.012">
    <system-out><![CDATA[
Scenario: Concluir meta ao atingir o valor da dívida       &amp#27;[90m# metas_de_redução_de_dívidas.feature:20&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário possui uma conta com saldo &amp#27;[0m&amp#27;[32m&amp#27;[1m"1500.00"&amp#27;[0m &amp#27;[90m# dominio.meta.MetaInversaTest.queUsuarioPossuiConta(java.lang.String)&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma meta inversa ativa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"1000.00"&amp#27;[0m     &amp#27;[90m# dominio.meta.MetaInversaTest.existeMetaAtiva(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário realiza um aporte de &amp#27;[0m&amp#27;[32m&amp#27;[1m"1000.00"&amp#27;[0m            &amp#27;[90m# dominio.meta.MetaInversaTest.usuarioRealizaAporteGenerico(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo status da meta deve mudar para &amp#27;[0m&amp#27;[32m&amp#27;[1m"CONCLUIDA"&amp#27;[0m        &amp#27;[90m# dominio.meta.MetaInversaTest.statusMetaDeveMudarPara(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo progresso deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"1.00"&amp#27;[0m                          &amp#27;[90m# dominio.meta.MetaInversaTest.progressoEsperado(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Realizar aporte inválido (valor nulo)" classname="Gestão de Metas de Redução de Dívidas" time="0.004">
    <system-out><![CDATA[
Scenario: Realizar aporte inválido (valor nulo)                                                        &amp#27;[90m# metas_de_redução_de_dívidas.feature:26&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário possui uma conta com saldo &amp#27;[0m&amp#27;[32m&amp#27;[1m"1500.00"&amp#27;[0m                                             &amp#27;[90m# dominio.meta.MetaInversaTest.queUsuarioPossuiConta(java.lang.String)&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma meta inversa ativa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"1000.00"&amp#27;[0m                                                 &amp#27;[90m# dominio.meta.MetaInversaTest.existeMetaAtiva(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tenta realizar um aporte de valor nulo&amp#27;[0m                                                &amp#27;[90m# dominio.meta.MetaInversaTest.aporteNulo()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve lançar uma exceção com a mensagem &amp#27;[0m&amp#27;[32m&amp#27;[1m"Valor do aporte deve ser um número positivo."&amp#27;[0m &amp#27;[90m# dominio.meta.MetaInversaTest.deveLancarExcecaoComMensagem(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Realizar aporte inválido (valor negativo)" classname="Gestão de Metas de Redução de Dívidas" time="0.004">
    <system-out><![CDATA[
Scenario: Realizar aporte inválido (valor negativo)                                                    &amp#27;[90m# metas_de_redução_de_dívidas.feature:31&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário possui uma conta com saldo &amp#27;[0m&amp#27;[32m&amp#27;[1m"1500.00"&amp#27;[0m                                             &amp#27;[90m# dominio.meta.MetaInversaTest.queUsuarioPossuiConta(java.lang.String)&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma meta inversa ativa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"1000.00"&amp#27;[0m                                                 &amp#27;[90m# dominio.meta.MetaInversaTest.existeMetaAtiva(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário tenta realizar um aporte de &amp#27;[0m&amp#27;[32m&amp#27;[1m"-50.00"&amp#27;[0m                                                  &amp#27;[90m# dominio.meta.MetaInversaTest.aporteNegativo(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve lançar uma exceção com a mensagem &amp#27;[0m&amp#27;[32m&amp#27;[1m"Valor do aporte deve ser um número positivo."&amp#27;[0m &amp#27;[90m# dominio.meta.MetaInversaTest.deveLancarExcecaoComMensagem(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Verificar progresso proporcional" classname="Gestão de Metas de Redução de Dívidas" time="0.006">
    <system-out><![CDATA[
Scenario: Verificar progresso proporcional                 &amp#27;[90m# metas_de_redução_de_dívidas.feature:36&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o usuário possui uma conta com saldo &amp#27;[0m&amp#27;[32m&amp#27;[1m"1500.00"&amp#27;[0m &amp#27;[90m# dominio.meta.MetaInversaTest.queUsuarioPossuiConta(java.lang.String)&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe uma meta inversa ativa de &amp#27;[0m&amp#27;[32m&amp#27;[1m"1200.00"&amp#27;[0m     &amp#27;[90m# dominio.meta.MetaInversaTest.existeMetaAtiva(java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo usuário realiza um aporte de &amp#27;[0m&amp#27;[32m&amp#27;[1m"300.00"&amp#27;[0m             &amp#27;[90m# dominio.meta.MetaInversaTest.usuarioRealizaAporteGenerico(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo progresso deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m"0.25"&amp#27;[0m                         &amp#27;[90m# dominio.meta.MetaInversaTest.progressoEsperado(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Calcular patrimônio com múltiplos ativos e passivos" classname="Visão de Patrimônio Líquido" time="0.007">
    <system-out><![CDATA[
Scenario: Calcular patrimônio com múltiplos ativos e passivos     &amp#27;[90m# patrimonio_liquido.feature:8&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque eu tenho uma &amp#27;[0m&amp#27;[32m&amp#27;[1m"Conta Corrente"&amp#27;[0m&amp#27;[32m com saldo de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m5000.00&amp#27;[0m &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.que_eu_tenho_uma_conta_com_saldo(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mtenho uma &amp#27;[0m&amp#27;[32m&amp#27;[1m"Conta Poupança"&amp#27;[0m&amp#27;[32m com saldo de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m10000.00&amp#27;[0m         &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.tenho_uma_conta_com_saldo_de_r$(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mtenho um &amp#27;[0m&amp#27;[32m&amp#27;[1m"Investimento em Ações"&amp#27;[0m&amp#27;[32m com valor de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m15000.00&amp#27;[0m   &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.tenho_um_investimento_com_valor_de(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mtenho um &amp#27;[0m&amp#27;[32m&amp#27;[1m"Cartão de Crédito"&amp#27;[0m&amp#27;[32m com uma dívida de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m3000.00&amp#27;[0m   &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.tenho_uma_divida_de(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu solicitar o meu patrimônio líquido&amp#27;[0m                      &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.eu_solicitar_o_meu_patrimonio_liquido()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo valor total do patrimônio deve ser R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m27000.00&amp#27;[0m           &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.o_valor_total_do_patrimonio_deve_ser(java.lang.Double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha ao calcular patrimônio com dados ausentes (Exceção)" classname="Visão de Patrimônio Líquido" time="0.005">
    <system-out><![CDATA[
Scenario: Falha ao calcular patrimônio com dados ausentes (Exceção)                    &amp#27;[90m# patrimonio_liquido.feature:16&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque eu tenho uma &amp#27;[0m&amp#27;[32m&amp#27;[1m"Conta Corrente"&amp#27;[0m&amp#27;[32m com saldo de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m2000.00&amp#27;[0m                      &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.que_eu_tenho_uma_conta_com_saldo(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mum &amp#27;[0m&amp#27;[32m&amp#27;[1m"Investimento Antigo"&amp#27;[0m&amp#27;[32m com valor não definido (nulo)&amp#27;[0m                           &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.um_investimento_com_valor_nao_definido_nulo(java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema de patrimônio deve lançar uma exceção com a mensagem &amp#27;[0m&amp#27;[32m&amp#27;[1m"Valor invalido"&amp#27;[0m &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.o_sistema_de_patrimonio_deve_lancar_uma_excecao_com_a_mensagem(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Gerar snapshot do patrimônio no fim do mês" classname="Visão de Patrimônio Líquido" time="0.006">
    <system-out><![CDATA[
Scenario: Gerar snapshot do patrimônio no fim do mês                                                  &amp#27;[90m# patrimonio_liquido.feature:22&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque hoje é o último dia do mês&amp#27;[0m                                                                &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.que_hoje_e_o_ultimo_dia_do_mes()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mmeu patrimônio líquido atual é de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m35000.00&amp#27;[0m                                                   &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.meu_patrimonio_liquido_atual_e_de(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo processo automático de snapshot for executado&amp#27;[0m                                                &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.o_processo_automatico_de_snapshot_for_executado()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mum registro histórico do patrimônio deve ser salvo com a data de hoje e o valor de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m35000.00&amp#27;[0m &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.um_registro_historico_do_patrimonio_deve_ser_salvo(java.lang.Double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Não gerar snapshot fora do fim do mês" classname="Visão de Patrimônio Líquido" time="0.007">
    <system-out><![CDATA[
Scenario: Não gerar snapshot fora do fim do mês               &amp#27;[90m# patrimonio_liquido.feature:28&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque hoje não é o último dia do mês&amp#27;[0m                    &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.que_hoje_nao_e_o_ultimo_dia_do_mes()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mmeu patrimônio líquido atual é de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m30000.00&amp#27;[0m           &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.meu_patrimonio_liquido_atual_e_de(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo processo automático de snapshot for executado&amp#27;[0m        &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.o_processo_automatico_de_snapshot_for_executado()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mnenhum registro histórico de patrimônio deve ser salvo&amp#27;[0m &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.nenhum_registro_historico_de_patrimonio_deve_ser_salvo()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Visualização do gráfico de evolução com dados históricos" classname="Visão de Patrimônio Líquido" time="0.011">
    <system-out><![CDATA[
Scenario: Visualização do gráfico de evolução com dados históricos     &amp#27;[90m# patrimonio_liquido.feature:37&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque eu tenho os seguintes snapshots de patrimônio:&amp#27;[0m             &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.que_eu_tenho_os_seguintes_snapshots(io.cucumber.datatable.DataTable)&amp#27;[0m
    | Data       | Valor       |
    | 2025-07-31 | R$ 25000.00 |
    | 2025-08-31 | R$ 27000.00 |
    | 2025-09-30 | R$ 26500.00 |
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu acessar a tela de evolução do patrimônio&amp#27;[0m                     &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.eu_acessar_a_tela_de_evolucao_do_patrimonio()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mum gráfico de linhas deve ser exibido com os dados do histórico&amp#27;[0m &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.um_grafico_de_linhas_deve_ser_exibido_com_os_dados_do_historico()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Tentar visualizar gráfico sem histórico de patrimônio" classname="Visão de Patrimônio Líquido" time="0.0">
    <system-out><![CDATA[
Scenario: Tentar visualizar gráfico sem histórico de patrimônio                          &amp#27;[90m# patrimonio_liquido.feature:46&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque eu sou um novo usuário sem nenhum snapshot de patrimônio&amp#27;[0m                     &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.que_eu_sou_um_novo_usuario_sem_nenhum_snapshot_de_patrimonio()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu acessar a tela de evolução do patrimônio&amp#27;[0m                                       &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.eu_acessar_a_tela_de_evolucao_do_patrimonio()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve exibir a mensagem &amp#27;[0m&amp#27;[32m&amp#27;[1m"O histórico de patrimônio ainda não foi gerado"&amp#27;[0m &amp#27;[90m# dominio.patrimonio.PatrimonioLiquidoTest.o_sistema_deve_exibir_a_mensagem(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Buscar taxa Selic com sucesso" classname="Rastreamento de Investimentos" time="0.006">
    <system-out><![CDATA[
Scenario: Buscar taxa Selic com sucesso                  &amp#27;[90m# rastreamento_de_investimentos.feature:4&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o job agendado é executado&amp#27;[0m                   &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.jobExecutado()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo sistema consulta a API externa do Banco Central&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.sistemaConsultaApi()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma taxa Selic diária é armazenada no sistema&amp#27;[0m       &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.taxaSelicArmazenada()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha ao consultar a API externa" classname="Rastreamento de Investimentos" time="0.003">
    <system-out><![CDATA[
Scenario: Falha ao consultar a API externa                                              &amp#27;[90m# rastreamento_de_investimentos.feature:9&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque o job agendado é executado&amp#27;[0m                                                  &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.jobExecutado()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo sistema consulta a API externa do Banco Central, mas a API não está disponível&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.apiNaoDisponivel()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32ma texa Selic não é atualizada naquele dia&amp#27;[0m                                        &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.taxaNaoAtualizada()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo sistema deve registrar um log de erro&amp#27;[0m                                           &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.registroDeLogDeErro()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Atualização de rendimento bem-sucedida" classname="Rastreamento de Investimentos" time="0.01">
    <system-out><![CDATA[
Scenario: Atualização de rendimento bem-sucedida                                 &amp#27;[90m# rastreamento_de_investimentos.feature:16&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32ma taxa selic diária é de &amp#27;[0m&amp#27;[32m&amp#27;[1m0.01&amp#27;[0m&amp#27;[32m (&amp#27;[0m&amp#27;[32m&amp#27;[1m1&amp#27;[0m&amp#27;[32m%)&amp#27;[0m                                         &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.taxaSelicUmPorcento(java.lang.Double,java.lang.Integer)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo job de atualização de rendimento é executado&amp#27;[0m                            &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.executarJobRendimento()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo valor atualizado do investimento deve ser &amp#27;[0m&amp#27;[32m&amp#27;[1m1010&amp#27;[0m                          &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.verificarValorAtualizado(double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Tentativa de aplicar rendimento sem taxa Selic disponível" classname="Rastreamento de Investimentos" time="0.0">
    <system-out><![CDATA[
Scenario: Tentativa de aplicar rendimento sem taxa Selic disponível              &amp#27;[90m# rastreamento_de_investimentos.feature:22&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mnão há taxa Selic disponível no sistema&amp#27;[0m                                    &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.taxaNaoDisponivel()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo job de atualização de rendimento é executado&amp#27;[0m                            &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.executarJobRendimento()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo investimento não deve ser atualizado&amp#27;[0m                                    &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.investimentoNaoAtualizado()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo sistema deve registrar um log de falha&amp#27;[0m                                   &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.regsitrarLogDeFalha()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Registro de histórico após atualização" classname="Rastreamento de Investimentos" time="0.008">
    <system-out><![CDATA[
Scenario: Registro de histórico após atualização                                 &amp#27;[90m# rastreamento_de_investimentos.feature:30&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32ma taxa selic diária é de &amp#27;[0m&amp#27;[32m&amp#27;[1m0.01&amp#27;[0m&amp#27;[32m (&amp#27;[0m&amp#27;[32m&amp#27;[1m1&amp#27;[0m&amp#27;[32m%)&amp#27;[0m                                         &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.taxaSelicUmPorcento(java.lang.Double,java.lang.Integer)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo job de atualização de rendimento é executado&amp#27;[0m                            &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.executarJobRendimento()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mdeve existir um registro no histórico com a data atual e o valor &amp#27;[0m&amp#27;[32m&amp#27;[1m1010&amp#27;[0m     &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.verificarHistorico(java.lang.Double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha ao registrar histórico" classname="Rastreamento de Investimentos" time="0.004">
    <system-out><![CDATA[
Scenario: Falha ao registrar histórico                                                               &amp#27;[90m# rastreamento_de_investimentos.feature:36&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m                     &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32ma taxa selic diária é de &amp#27;[0m&amp#27;[32m&amp#27;[1m0.01&amp#27;[0m&amp#27;[32m (&amp#27;[0m&amp#27;[32m&amp#27;[1m1&amp#27;[0m&amp#27;[32m%)&amp#27;[0m                                                             &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.taxaSelicUmPorcento(java.lang.Double,java.lang.Integer)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mo job de atualização de rendimento é executado, mas ocorre uma falha no registro de histórico&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.executarJobRendimentoFalhaHistorico()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve gerar um log de erro indicando falha ao registrar histórico&amp#27;[0m                    &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.logErroHistorico()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Resgate total bem-sucedido" classname="Rastreamento de Investimentos" time="0.004">
    <system-out><![CDATA[
Scenario: Resgate total bem-sucedido                                             &amp#27;[90m# rastreamento_de_investimentos.feature:45&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mrealizo o resgate total do valor investido&amp#27;[0m                                &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.resgateTotaldoValor()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo investimento deve ser removido do sistema&amp#27;[0m                               &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.investimentoRemovido()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha em etapas anteriores do resgate total" classname="Rastreamento de Investimentos" time="0.006">
    <system-out><![CDATA[
Scenario: Falha em etapas anteriores do resgate total                            &amp#27;[90m# rastreamento_de_investimentos.feature:50&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mrealizo o resgate total do valor investido, mas uma falha ocorre&amp#27;[0m          &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.falhaEmResgateTotal()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo investimento não deve ser removido&amp#27;[0m                                      &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.investimentoNaoRemovido()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo sistema deve emitir um log de falha&amp#27;[0m                                      &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.emicaoLogFalha()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Resgate parcial bem-sucedido" classname="Rastreamento de Investimentos" time="0.002">
    <system-out><![CDATA[
Scenario: Resgate parcial bem-sucedido                                           &amp#27;[90m# rastreamento_de_investimentos.feature:58&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mrealizo o resgate parcial de &amp#27;[0m&amp#27;[32m&amp#27;[1m500&amp#27;[0m&amp#27;[32m reais do valor investido&amp#27;[0m                 &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.resgateParcialQuinhetos(double)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve atualizar o valor investido para &amp#27;[0m&amp#27;[32m&amp#27;[1m500&amp#27;[0m&amp#27;[32m reais&amp#27;[0m                 &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.valorAtualizado(double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Tentativa de resgate total em resgate parcial" classname="Rastreamento de Investimentos" time="0.002">
    <system-out><![CDATA[
Scenario: Tentativa de resgate total em resgate parcial                          &amp#27;[90m# rastreamento_de_investimentos.feature:63&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mrealizo o resgate parcial com o valor total investido&amp#27;[0m                     &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.resgateParcialTotal()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve impedir a atualização do valor investido&amp#27;[0m                   &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.valorNaoAtualizado()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mexibir aviso de tentativa de resgate total em resgate parcial&amp#27;[0m              &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.exibirAviso()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Deleção do histórico de valorização bem-sucedido em resgate total" classname="Rastreamento de Investimentos" time="0.002">
    <system-out><![CDATA[
Scenario: Deleção do histórico de valorização bem-sucedido em resgate total      &amp#27;[90m# rastreamento_de_investimentos.feature:70&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mrealizo o resgate total do valor investido&amp#27;[0m                                &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.resgateTotaldoValor()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve apagar o histórico de valorização daquele investimento&amp#27;[0m     &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.historicoDeletado()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha deleção do histórico de valorização em resgate total" classname="Rastreamento de Investimentos" time="0.004">
    <system-out><![CDATA[
Scenario: Falha deleção do histórico de valorização em resgate total                           &amp#27;[90m# rastreamento_de_investimentos.feature:75&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m               &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mrealizo o resgate total do valor investido, mas ocorre uma falha na deleção o histórico&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.falhaDelecaoHistorico()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve levantar uma exceção referente à falha na deleção&amp#27;[0m                        &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.levantarExcecao()&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo sistema deve emitir um log de falha&amp#27;[0m                                                    &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.emicaoLogFalha()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Histórico de valorização atualizado com sucesso em resgate parcial" classname="Rastreamento de Investimentos" time="0.004">
    <system-out><![CDATA[
Scenario: Histórico de valorização atualizado com sucesso em resgate parcial                                 &amp#27;[90m# rastreamento_de_investimentos.feature:83&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m                             &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mrealizo o resgate parcial de &amp#27;[0m&amp#27;[32m&amp#27;[1m500&amp#27;[0m&amp#27;[32m reais do valor investido&amp#27;[0m                                             &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.resgateParcialQuinhetos(double)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve atualizar o histórico com uma nova entrada com o valor restante investido de &amp#27;[0m&amp#27;[32m&amp#27;[1m500&amp#27;[0m&amp#27;[32m reais&amp#27;[0m &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.atualizacaoHistorico(double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="Falha em etapas anteriores à atualização do histórico em resgate parcial" classname="Rastreamento de Investimentos" time="0.002">
    <system-out><![CDATA[
Scenario: Falha em etapas anteriores à atualização do histórico em resgate parcial &amp#27;[90m# rastreamento_de_investimentos.feature:88&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque existe um investimento do tipo Tesouro Selic com valor atual de &amp#27;[0m&amp#27;[32m&amp#27;[1m1000&amp#27;[0m   &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.criarInvestimento(double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32mrealizo o resgate parcial, mas uma falha ocorre&amp#27;[0m                             &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.falhaEmResgateParcial()&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema não deve atualizar o histórico com uma nova entrada&amp#27;[0m               &amp#27;[90m# dominio.rastreamentoDeInvestimentos.RastreamentoDeInvestimentosTest.naoAtualizacaoHistorico()&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="[SUCESSO] Registrar reembolso vinculando corretamente a uma despesa" classname="Tratamento de Reembolsos" time="0.012">
    <system-out><![CDATA[
Scenario: [SUCESSO] Registrar reembolso vinculando corretamente a uma despesa                          &amp#27;[90m# tratamento_reembolsos.feature:11&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque registrei uma despesa original com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-123"&amp#27;[0m&amp#27;[32m de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m80.00&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m &amp#27;[90m# dominio.reembolso.ReembolsoTest.que_registrei_uma_despesa_original_com_id_de_na_categoria(java.lang.String,java.lang.Double,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu registrar um reembolso de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m20.00&amp#27;[0m&amp#27;[32m e o vincular à despesa com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-123"&amp#27;[0m               &amp#27;[90m# dominio.reembolso.ReembolsoTest.eu_registrar_um_reembolso_e_o_vincular_a_despesa_com_id(java.lang.Double,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve criar uma nova transação do tipo &amp#27;[0m&amp#27;[32m&amp#27;[1m"REEMBOLSO"&amp#27;[0m                                     &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_sistema_deve_criar_uma_nova_transacao_do_tipo(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo reembolso criado deve estar vinculado à despesa com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-123"&amp#27;[0m                           &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_reembolso_criado_deve_estar_vinculado_a_despesa_com_id(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="[FALHA] Tentar registrar reembolso sem vincular a uma despesa" classname="Tratamento de Reembolsos" time="0.002">
    <system-out><![CDATA[
Scenario: [FALHA] Tentar registrar reembolso sem vincular a uma despesa                                   &amp#27;[90m# tratamento_reembolsos.feature:17&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque estou na tela de registro de reembolso&amp#27;[0m                                                        &amp#27;[90m# dominio.reembolso.ReembolsoTest.que_estou_na_tela_de_registro_de_reembolso()&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu tento registrar um reembolso de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m20.00&amp#27;[0m&amp#27;[32m sem selecionar uma despesa original&amp#27;[0m                    &amp#27;[90m# dominio.reembolso.ReembolsoTest.eu_tento_registrar_um_reembolso_de_r_sem_selecionar_uma_despesa_original(java.lang.Double)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema de reembolso deve exibir a mensagem de erro &amp#27;[0m&amp#27;[32m&amp#27;[1m"O ID da despesa original não pode ser nulo"&amp#27;[0m &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_sistema_de_reembolso_deve_exibir_a_mensagem_de_erro(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="[SUCESSO] Reembolso abate corretamente o gasto da categoria (e não conta como receita)" classname="Tratamento de Reembolsos" time="0.014">
    <system-out><![CDATA[
Scenario: [SUCESSO] Reembolso abate corretamente o gasto da categoria (e não conta como receita)                      &amp#27;[90m# tratamento_reembolsos.feature:26&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque uma despesa original com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-abc"&amp#27;[0m&amp#27;[32m tem o valor de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m80.00&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/2025"&amp#27;[0m &amp#27;[90m# dominio.reembolso.ReembolsoTest.que_uma_despesa_original_com_id_tem_o_valor_de_r_na_categoria_em(java.lang.String,java.lang.Double,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mque outra despesa com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-def"&amp#27;[0m&amp#27;[32m tem o valor de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m70.00&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/2025"&amp#27;[0m          &amp#27;[90m# dominio.reembolso.ReembolsoTest.que_outra_despesa_com_id_tem_o_valor_de_r_na_categoria_em(java.lang.String,java.lang.Double,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo total de receitas do usuário é de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m1000.00&amp#27;[0m                                                                  &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_total_de_receitas_do_usuario_e_de_r(java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu registrar um reembolso de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m20.00&amp#27;[0m&amp#27;[32m vinculado à despesa com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-abc"&amp#27;[0m                                 &amp#27;[90m# dominio.reembolso.ReembolsoTest.eu_registrar_um_reembolso_vinculado_a_despesa_com_id(java.lang.Double,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo total de gastos na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/2025"&amp#27;[0m&amp#27;[32m deve ser de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m130.00&amp#27;[0m                                &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_total_de_gastos_na_categoria_em_deve_ser_de_r(java.lang.String,java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo total de receitas do usuário deve permanecer R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m1000.00&amp#27;[0m                                                       &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_total_de_receitas_do_usuario_deve_permanecer_r(java.lang.Double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="[FALHA] Lógica contábil não é aplicada se o reembolso for inválido (ex: valor alto)" classname="Tratamento de Reembolsos" time="0.004">
    <system-out><![CDATA[
Scenario: [FALHA] Lógica contábil não é aplicada se o reembolso for inválido (ex: valor alto)                                    &amp#27;[90m# tratamento_reembolsos.feature:34&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque uma despesa original com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-ghi"&amp#27;[0m&amp#27;[32m tem o valor de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m50.00&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Lazer"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/2025"&amp#27;[0m                  &amp#27;[90m# dominio.reembolso.ReembolsoTest.que_uma_despesa_original_com_id_tem_o_valor_de_r_na_categoria_em(java.lang.String,java.lang.Double,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu tento registrar um reembolso de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m60.00&amp#27;[0m&amp#27;[32m para a despesa com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-ghi"&amp#27;[0m                                           &amp#27;[90m# dominio.reembolso.ReembolsoTest.eu_tento_registrar_um_reembolso_de_r_para_a_despesa_com_id(java.lang.Double,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema de reembolso deve exibir a mensagem de erro &amp#27;[0m&amp#27;[32m&amp#27;[1m"O valor do reembolso não pode ser maior que o da despesa original"&amp#27;[0m &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_sistema_de_reembolso_deve_exibir_a_mensagem_de_erro(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo total de gastos na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Lazer"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/2025"&amp#27;[0m&amp#27;[32m deve ser de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m50.00&amp#27;[0m                                                   &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_total_de_gastos_na_categoria_em_deve_ser_de_r(java.lang.String,java.lang.String,java.lang.Double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="[SUCESSO] Reembolso restaura corretamente o valor no orçamento" classname="Tratamento de Reembolsos" time="0.004">
    <system-out><![CDATA[
Scenario: [SUCESSO] Reembolso restaura corretamente o valor no orçamento                                &amp#27;[90m# tratamento_reembolsos.feature:44&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque tenho um orçamento de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m500.00&amp#27;[0m&amp#27;[32m para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/2025"&amp#27;[0m                             &amp#27;[90m# dominio.reembolso.ReembolsoTest.que_tenho_um_orcamento_de_r_para_em(java.lang.Double,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mque uma despesa original com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-xyz"&amp#27;[0m&amp#27;[32m tem o valor de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m400.00&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m &amp#27;[90m# dominio.reembolso.ReembolsoTest.que_uma_despesa_original_com_id_tem_o_valor_de_r_na_categoria(java.lang.String,java.lang.Double,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu receber um reembolso de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m30.00&amp#27;[0m&amp#27;[32m vinculado à despesa com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-xyz"&amp#27;[0m                     &amp#27;[90m# dominio.reembolso.ReembolsoTest.eu_receber_um_reembolso_de_r_vinculado_a_despesa_com_id(java.lang.Double,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo valor disponível no meu orçamento de &amp#27;[0m&amp#27;[32m&amp#27;[1m"Alimentação"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"10/2025"&amp#27;[0m&amp#27;[32m deve ser de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m130.00&amp#27;[0m          &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_valor_disponivel_no_meu_orcamento_de_em_deve_ser_de_r(java.lang.String,java.lang.String,java.lang.Double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="[FALHA] Orçamento não é alterado se o reembolso for inválido (ex: sem vínculo)" classname="Tratamento de Reembolsos" time="0.002">
    <system-out><![CDATA[
Scenario: [FALHA] Orçamento não é alterado se o reembolso for inválido (ex: sem vínculo)                           &amp#27;[90m# tratamento_reembolsos.feature:50&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque tenho um orçamento de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m300.00&amp#27;[0m&amp#27;[32m para &amp#27;[0m&amp#27;[32m&amp#27;[1m"Transporte"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"11/2025"&amp#27;[0m                                         &amp#27;[90m# dominio.reembolso.ReembolsoTest.que_tenho_um_orcamento_de_r_para_em(java.lang.Double,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mque uma despesa original com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-tst"&amp#27;[0m&amp#27;[32m tem o valor de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m50.00&amp#27;[0m&amp#27;[32m na categoria &amp#27;[0m&amp#27;[32m&amp#27;[1m"Transporte"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"11/2025"&amp#27;[0m &amp#27;[90m# dominio.reembolso.ReembolsoTest.que_uma_despesa_original_com_id_tem_o_valor_de_r_na_categoria_em(java.lang.String,java.lang.Double,java.lang.String,java.lang.String)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu tento registrar um reembolso de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m20.00&amp#27;[0m&amp#27;[32m sem selecionar uma despesa original&amp#27;[0m                             &amp#27;[90m# dominio.reembolso.ReembolsoTest.eu_tento_registrar_um_reembolso_de_r_sem_selecionar_uma_despesa_original(java.lang.Double)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema de reembolso deve exibir a mensagem de erro &amp#27;[0m&amp#27;[32m&amp#27;[1m"O ID da despesa original não pode ser nulo"&amp#27;[0m          &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_sistema_de_reembolso_deve_exibir_a_mensagem_de_erro(java.lang.String)&amp#27;[0m
  &amp#27;[32mAnd &amp#27;[0m&amp#27;[32mo valor disponível no meu orçamento de &amp#27;[0m&amp#27;[32m&amp#27;[1m"Transporte"&amp#27;[0m&amp#27;[32m em &amp#27;[0m&amp#27;[32m&amp#27;[1m"11/2025"&amp#27;[0m&amp#27;[32m deve ser de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m250.00&amp#27;[0m                       &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_valor_disponivel_no_meu_orcamento_de_em_deve_ser_de_r(java.lang.String,java.lang.String,java.lang.Double)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="[SUCESSO] Permitir registrar reembolso com valor igual à despesa" classname="Tratamento de Reembolsos" time="0.002">
    <system-out><![CDATA[
Scenario: [SUCESSO] Permitir registrar reembolso com valor igual à despesa             &amp#27;[90m# tratamento_reembolsos.feature:61&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque eu tenho uma despesa original com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-789"&amp#27;[0m&amp#27;[32m de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m75.00&amp#27;[0m             &amp#27;[90m# dominio.reembolso.ReembolsoTest.que_eu_tenho_uma_despesa_original_com_id_de_r(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu tento registrar um reembolso de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m75.00&amp#27;[0m&amp#27;[32m para a despesa com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-789"&amp#27;[0m &amp#27;[90m# dominio.reembolso.ReembolsoTest.eu_tento_registrar_um_reembolso_de_r_para_a_despesa_com_id(java.lang.Double,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema deve criar uma nova transação do tipo &amp#27;[0m&amp#27;[32m&amp#27;[1m"REEMBOLSO"&amp#27;[0m                     &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_sistema_deve_criar_uma_nova_transacao_do_tipo(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
  <testcase name="[FALHA] Rejeitar reembolso com valor maior que a despesa" classname="Tratamento de Reembolsos" time="0.007">
    <system-out><![CDATA[
Scenario: [FALHA] Rejeitar reembolso com valor maior que a despesa                                                               &amp#27;[90m# tratamento_reembolsos.feature:66&amp#27;[0m
  &amp#27;[32mGiven &amp#27;[0m&amp#27;[32mque eu tenho uma despesa original com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-456"&amp#27;[0m&amp#27;[32m de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m80.00&amp#27;[0m                                                       &amp#27;[90m# dominio.reembolso.ReembolsoTest.que_eu_tenho_uma_despesa_original_com_id_de_r(java.lang.String,java.lang.Double)&amp#27;[0m
  &amp#27;[32mWhen &amp#27;[0m&amp#27;[32meu tento registrar um reembolso de R$ &amp#27;[0m&amp#27;[32m&amp#27;[1m90.00&amp#27;[0m&amp#27;[32m para a despesa com ID &amp#27;[0m&amp#27;[32m&amp#27;[1m"despesa-456"&amp#27;[0m                                           &amp#27;[90m# dominio.reembolso.ReembolsoTest.eu_tento_registrar_um_reembolso_de_r_para_a_despesa_com_id(java.lang.Double,java.lang.String)&amp#27;[0m
  &amp#27;[32mThen &amp#27;[0m&amp#27;[32mo sistema de reembolso deve exibir a mensagem de erro &amp#27;[0m&amp#27;[32m&amp#27;[1m"O valor do reembolso não pode ser maior que o da despesa original"&amp#27;[0m &amp#27;[90m# dominio.reembolso.ReembolsoTest.o_sistema_de_reembolso_deve_exibir_a_mensagem_de_erro(java.lang.String)&amp#27;[0m
]]></system-out>
  </testcase>
</testsuite>