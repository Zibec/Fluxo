Domain Fluxo {
    Subdomain GestaoFinanceiraBase
    Subdomain PlanejamentoEMetas
    Subdomain AutomacaoEAgendamentos
    Subdomain PatrimonioEInvestimentos
    Subdomain UsuarioEConfiguracoes
}

BoundedContext GestaoFinanceiraBase implements GestaoFinanceiraBase{
    Aggregate Conta {
        Entity Conta {
            aggregateRoot

            -ContaId id
            BigDecimal saldo 
            String nome
            String tipo 
            String banco

            void realizarTransacao(BigDecimal valor);

            void creditar(BigDecimal valor);

            boolean temSaldoSuficiente(BigDecimal valor);
            
            Repository ContaRepositorio {
                void salvar(@Conta conta);
                Optional<Conta> obter(String contaId);
                boolean contaExistente(String nome);
                List<@Conta> listarTodas();
                void limpar();
            }
        }

        Service ContaService {
            void salvar(@Conta conta);
            Optional<Conta> obter(String contaId);
            boolean contaExistente(String nome);
        }

        ValueObject ContaId {
            String id
            String getId();
        }
    }

    Aggregate Cartao {
        Entity Cartao{
            aggregateRoot
            
            -CartaoId id
            -CartaoNumero numero
            String titular
            YearMonth validade
            -Cvv cvv

            BigDecimal limite
            BigDecimal saldo 
            int contador
            -Fatura fatura
            LocalDate dataFechamentoFatura
            LocalDate dataVencimentoFatura

            void realizarTransacao(BigDecimal valor);
            void fecharFatura();
            void pagarFatura();

            Repository CartaoRepositorio {
                void salvar(@Cartao cartao);
                @Cartao obter(@CartaoNumero numero);
            }

        }

        ValueObject CartaoNumero{
            String numero

            boolean isValid(String codigo);
        }

        ValueObject Cvv {
            String codigo

            boolean isValid(String codigo);
        }
        
        ValueObject CartaoId {
            String id
            String getId();
        }

        ValueObject Fatura {
            -Cartao cartao
            BigDecimal valorTotal
            LocalDate dataVencimento
            String status

            void adicionarValor(BigDecimal valor);
            void fecharFatura();
            void pagarFatura();
        }

        Service CartaoService {
            void salvar(@Cartao cartao);
            @Cartao obter(@CartaoNumero numero);
        }
    }

    Aggregate Transacao {
        Entity Transacao{
            aggregateRoot

            String id 
            String origemAgendamentoId
            String descricao
            BigDecimal valor 
            LocalDate data 
            -Tipo tipo 
            String transacaoOriginalId
            FormaPagamentoId pagamentoId
            boolean avulsa
            String perfilId

            void atualizarValor(BigDecimal novoValor);
            void efetivar();
            void cancelar();
            void reagendarPara(LocalDate novaData, LocalDate hoje);
            boolean isProximaDoVencimento();

            Repository TransacaoRepositorio {
                void salvar(@Transacao t);
                Optional<@Transacao> encontrarPorAgendamentoEData(String agendamentoId, LocalDate data);
                boolean existePorCategoriaId(String categoriaId);
                List<@Transacao> listarTodas();
                String chave(String agendamentoId, LocalDate data);
                void atualizar(@Transacao t);
                void excluir(String id);
                Optional<@Transacao> obterPorId(String id);
                void limpar();
            }

        }

        ValueObject FormaPagamentoId {
            String id
            String getId();
        }

        enum StatusTransacao {
            PENDENTE,
            EFETIVADA,
            CANCELADA
        }

        enum Tipo {
            DESPESA,
            RECEITA,
            REEMBOLSO
        }

        Service TransacaoService {
            @Transacao criarPendenteDeAgendamento(String agendamentoId, String descricao, BigDecimal valor, LocalDate data, @Conta conta, boolean avulsa, String perfilId);
            BigDecimal calcularGastosConsolidadosPorCategoria(String categoriaId, YearMonth mes);
            @Transacao registrarReembolso(BigDecimal valorReembolso, String idDespesaOriginal);

        }
        

    }

    Aggregate Categoria {
        Entity Categoria {
            String id
            String nome

            Repository CategoriaRepositorio {
                void salvar(@Categoria categoria);
                Optional<@Categoria> obterPorNome(String nome);
                Optional<@Categoria> obter(String id);
                void deletar(String id);
                int contagem();
            }
        }

        Service CategoriaService {
            void salvar(@Categoria categoria);
            Optional<@Categoria> obterPorNome(String nome);
            void deletar(String id);
        }
    }
}

BoundedContext PlanejamentoEMetas implements PlanejamentoEMetas {
    Aggregate Meta {
        Entity Meta {
            aggregateRoot
            
            String id
            -TipoMeta tipo
            String descricao
            BigDecimal valorAlvo
            BigDecimal saldoAcumulado
            LocalDate prazo
            -MetaStatus status

            void realizarAporte(BigDecimal valorDoAporte);

            Repository MetaRepositorio {
                void salvar(@Meta meta);
                Optional<@Meta> obter(String metaId);
                Optional<@Meta> obterPorNome(String nomeMeta);
                void deletar(String metaId); 
            }

        }

        enum MetaStatus {
            ATIVA,
            CONCLUIDA
        }

        enum TipoMeta {
            POUPANCA,
            REDUCAO_DIVIDA
        }

        Service MetaService {
            void realizarAporte(String metaId, BigDecimal valorDoAporte, @Conta contaPrincipal);
            void salvar(@Meta meta);
            Optional<@Meta> obter(String metaId);
            Optional<@Meta> obterPorNome(String nomeMeta);
            void deletar(String metaId); 
        }
    }

    Aggregate MetaInversa {
        Entity MetaInversa {
            String id
            String nome
            BigDecimal valorDivida
            BigDecimal valorAcumulado
            String contaAssociadaId
            LocalDate dataLimite
            -MetaInversaStatus status

            void conluirMeta();
            void realizarAporte(BigDecimal valorDoAporte);

            Repository MetaInversaRepositorio{
                void salvar(@MetaInversa metaInversa);
                Optional<@MetaInversa> obter(String metaId);
                Optional<@MetaInversa> obterPorNome(String nomeMeta)
                void deletar(String metaId);
                void limpar();
            }
        }

        enum MetaInversaStatus {
            ATIVA,
            CONCLUIDA
        }

        enum TipoMetaInversa {
            POUPANCA,
            REDUCAO_DIVIDA
        }
    }
}

BoundedContext AutomacaoEAgendamentos implements AutomacaoEAgendamentos {
    Aggregate Agendamento {
        Entity Agendamento {
            aggregateRoot

            String descricao
            String id
            BigDecimal valor
            -Frequencia frequencia
            LocalDate proximaData
            boolean ativo
            String perfilId

            void avancarProximaData();

            Repository AgendamentoRepositorio {
                void salvar(@Agendamento a);
                Optional<@Agendamento> obter(String id);
            }
        }

        enum Frequencia {
            DIARIA,
            SEMANAL,
            MENSAL,
            ANUAL
        }

        Service AgendamentoService {
            void salvar(@Agendamento a);
            void salvarValidandoNaoNoPassado(@Agendamento a, LocalDate hoje);
            Optional<@Agendamento> obter(String id);
            boolean executarSeHoje(@Agendamento a, LocalDate hoje);
        }
    }
}

BoundedContext PatrimonioEInvestimentos implements PatrimonioEInvestimentos{
    Aggregate Investimento {
        Entity Investimento{
            aggregateRoot

            String id
            String nome
            String descricao
            BigDecimal valorAtual

            void atualizarValor(BigDecimal taxaSelic);
            void resgatarValor(BigDecimal valor);

            Repository InvestimentoRepositorio {
                void salvar(@Investimento investimento);
                @Investimento obter(String investimentoId);
                ArrayList<@Investimento> obterTodos();
                void atualizar(String investimentoId, Investimento @investimento);
                void deletar(String investimentoId);
            }
        }

        Service InvestimentoService {
            void salvar (@Investimento investimento);
            @Investimento obter(String investimentoId);
            void atualizar(String investimentoId, @Investimento investimento);
            void atualizarRendimento (@Investimento investimento);
            void resgateTotal(String investimentoId);
            void resgateParcial(String investimentoId, BigDecimal valor);
        }

        Entity JobScheduler {
            -InvestimentoService investimentoService
            -InvestimentoRepositorio investimentoRepositorio
            void executarJob();
        }
    }

    Aggregate HistoricoInvestimento {
        Entity HistoricoInvestimento {
            aggregateRoot

            String investimentoId
            BigDecimal valorAtualizado
            LocalDate data

            Repository HistoricoInvestimentoRepositorio{
                void salvar(@HistoricoInvestimento historicoInvestimento);
                List<@HistoricoInvestimento> obterTodos();
                void deletarTodosPorId(String investimentoId)
            }
        }

        Service HistoricoInvestimentoService {
            void salvar (@HistoricoInvestimento historicoInvestimento);
            List<HistoricoInvestimento> obterTodos ();
        }
    }

    Aggregate TaxaSelic {
        Entity TaxaSelic {
            aggregateRoot
        
            BigDecimal valor

            Repository TaxaSelicRepository {
                void salvar(@TaxaSelic taxaSelic);
                @TaxaSelic obter();
            }
        }

        Service TaxaSelicService {
            void atualizarTaxaSelic();
        }

        Entity SelicApiClient {
            boolean status
            Double buscarTaxaSelicDiaria();
        }
    }

    Aggregate Divida {
        Entity Divida {
            aggregateRoot

            String id
            String nome
            BigDecimal valorDevedor

            Repository DividaRepositorio {
                void salvar(@Divida divida);
                List<@Divida> obterTodos();
                void limpar();
            }
        }
    }

    Aggregate Patrimonio {
        Entity Patrimonio{
            aggregateRoot

            String id
            LocalDate data
            BigDecimal valor

            Repository PatrimonioRepositorio {
                void salvar(@SnapshotPatrimonio snapshot);
                List<@SnapshotPatrimonio> obterTodos();
                void limpar();
            }
        } 

        Service PatrimonioService {
            BigDecimal calcularPatrimonioLiquido();
            void gerarEsalvarSnapshot(LocalDate data);
            List<@SnapshotPatrimonio> obterHistoricoDePatrimonio();
        }
    }
}

BoundedContext UsuarioEConfiguracoes implements UsuarioEConfiguracoes{
    Aggregate Usuario {
        Entity Usuario{
            String id
            String username
            -Email userEmail
            -Password password
            -DataFormato formatoDataPreferido
            -Moeda moedaPreferida

            boolean verifyEmail(String email);
            boolean verifyPassword(String password);
            void setUsername(String newUsername, String password, @UsuarioService service);

            //Revisar usuário

            Repository UsuarioRepositorio {
                void salvar(@Usuario usuario);
                Optional<@Usuario> obter(String contaId);
                boolean emailExistente(String email);
                boolean usernameExistente(String username);
            }

        }
        
        ValueObject Password {
            byte[] passwordHash
            byte[] salt
            SecureRandom random

            byte[] hash(String password, byte[] salt);
            boolean verify(String inputPassword);
        }

        ValueObject Email {
            String userEmail
            verifyEmail(String email);
        }

        enum Moeda {
            BRL("BRL"),
            USD("USD"),
            EUR("EUR");

            String codigo
        }

        enum DataFormato {
            MMDDYYYY("MM-dd-yyyy"),
            DDMMYYYY("dd-MM-yyyy"),
            YYYYMMDD("yyyy-MM-dd");

            String formato
        }

        Service UsuarioService {
            void salvar(@Usuario usuario);
            Usuario obter(String contaId);
            boolean emailExistente(String email);
            boolean usernameExistente(String username);
        }

    }

    Aggregate Perfil{
        Entity Perfil {
            String id
            String nome

            Repository PerfilRepository {
                salvar(@Perfil perfil);
                @Perfil obter(String id);
                ArrayList<@Perfil> obterTodos();
                public void alterar(String id,@Perfil perfil);
                void deletar(String id);
            }
        }
    }  
}